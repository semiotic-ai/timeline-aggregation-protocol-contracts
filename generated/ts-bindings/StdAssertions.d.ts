/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface StdAssertionsInterface extends Interface {
  functions: {
    IS_TEST: TypedFunctionDescription<{ encode([]: []): string }>;

    failed: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    log: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    log_address: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    log_array: TypedEventDescription<{ encodeTopics([val]: [null]): string[] }>;

    log_bytes: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    log_bytes32: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    log_int: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    log_named_address: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_named_array: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_named_bytes: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_named_bytes32: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_named_decimal_int: TypedEventDescription<{
      encodeTopics([key, val, decimals]: [null, null, null]): string[];
    }>;

    log_named_decimal_uint: TypedEventDescription<{
      encodeTopics([key, val, decimals]: [null, null, null]): string[];
    }>;

    log_named_int: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_named_string: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_named_uint: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_string: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    log_uint: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    logs: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;
  };
}

export class StdAssertions extends Contract {
  connect(signerOrProvider: Signer | Provider | string): StdAssertions;
  attach(addressOrName: string): StdAssertions;
  deployed(): Promise<StdAssertions>;

  on(event: EventFilter | string, listener: Listener): StdAssertions;
  once(event: EventFilter | string, listener: Listener): StdAssertions;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): StdAssertions;
  removeAllListeners(eventName: EventFilter | string): StdAssertions;
  removeListener(eventName: any, listener: Listener): StdAssertions;

  interface: StdAssertionsInterface;

  functions: {
    IS_TEST(overrides?: UnsignedTransaction): Promise<boolean>;

    "IS_TEST()"(overrides?: UnsignedTransaction): Promise<boolean>;

    failed(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "failed()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;
  };

  IS_TEST(overrides?: UnsignedTransaction): Promise<boolean>;

  "IS_TEST()"(overrides?: UnsignedTransaction): Promise<boolean>;

  failed(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "failed()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  filters: {
    log(arg0: null): EventFilter;

    log_address(arg0: null): EventFilter;

    log_array(val: null): EventFilter;

    log_bytes(arg0: null): EventFilter;

    log_bytes32(arg0: null): EventFilter;

    log_int(arg0: null): EventFilter;

    log_named_address(key: null, val: null): EventFilter;

    log_named_array(key: null, val: null): EventFilter;

    log_named_bytes(key: null, val: null): EventFilter;

    log_named_bytes32(key: null, val: null): EventFilter;

    log_named_decimal_int(key: null, val: null, decimals: null): EventFilter;

    log_named_decimal_uint(key: null, val: null, decimals: null): EventFilter;

    log_named_int(key: null, val: null): EventFilter;

    log_named_string(key: null, val: null): EventFilter;

    log_named_uint(key: null, val: null): EventFilter;

    log_string(arg0: null): EventFilter;

    log_uint(arg0: null): EventFilter;

    logs(arg0: null): EventFilter;
  };

  estimate: {
    IS_TEST(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "IS_TEST()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    failed(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "failed()"(overrides?: UnsignedTransaction): Promise<BigNumber>;
  };
}
