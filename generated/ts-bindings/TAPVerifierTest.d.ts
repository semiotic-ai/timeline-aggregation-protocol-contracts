/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface TAPVerifierTestInterface extends Interface {
  functions: {
    IS_TEST: TypedFunctionDescription<{ encode([]: []): string }>;

    excludeArtifacts: TypedFunctionDescription<{ encode([]: []): string }>;

    excludeContracts: TypedFunctionDescription<{ encode([]: []): string }>;

    excludeSenders: TypedFunctionDescription<{ encode([]: []): string }>;

    failed: TypedFunctionDescription<{ encode([]: []): string }>;

    setUp: TypedFunctionDescription<{ encode([]: []): string }>;

    targetArtifactSelectors: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    targetArtifacts: TypedFunctionDescription<{ encode([]: []): string }>;

    targetContracts: TypedFunctionDescription<{ encode([]: []): string }>;

    targetSelectors: TypedFunctionDescription<{ encode([]: []): string }>;

    targetSenders: TypedFunctionDescription<{ encode([]: []): string }>;

    testEdgeCaseMaxValuedRav: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testEdgeCaseMinValuedRav: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testInvalidSignature: TypedFunctionDescription<{ encode([]: []): string }>;

    testRAVInvalidAllocationID: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testRAVInvalidTimestamp: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testRAVInvalidValueAggregate: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testRecoverSignature: TypedFunctionDescription<{ encode([]: []): string }>;

    testSampledValidRAV: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    log: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    log_address: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    log_array: TypedEventDescription<{ encodeTopics([val]: [null]): string[] }>;

    log_bytes: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    log_bytes32: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    log_int: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    log_named_address: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_named_array: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_named_bytes: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_named_bytes32: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_named_decimal_int: TypedEventDescription<{
      encodeTopics([key, val, decimals]: [null, null, null]): string[];
    }>;

    log_named_decimal_uint: TypedEventDescription<{
      encodeTopics([key, val, decimals]: [null, null, null]): string[];
    }>;

    log_named_int: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_named_string: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_named_uint: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_string: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    log_uint: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    logs: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;
  };
}

export class TAPVerifierTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): TAPVerifierTest;
  attach(addressOrName: string): TAPVerifierTest;
  deployed(): Promise<TAPVerifierTest>;

  on(event: EventFilter | string, listener: Listener): TAPVerifierTest;
  once(event: EventFilter | string, listener: Listener): TAPVerifierTest;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): TAPVerifierTest;
  removeAllListeners(eventName: EventFilter | string): TAPVerifierTest;
  removeListener(eventName: any, listener: Listener): TAPVerifierTest;

  interface: TAPVerifierTestInterface;

  functions: {
    IS_TEST(overrides?: UnsignedTransaction): Promise<boolean>;

    "IS_TEST()"(overrides?: UnsignedTransaction): Promise<boolean>;

    excludeArtifacts(overrides?: UnsignedTransaction): Promise<string[]>;

    "excludeArtifacts()"(overrides?: UnsignedTransaction): Promise<string[]>;

    excludeContracts(overrides?: UnsignedTransaction): Promise<string[]>;

    "excludeContracts()"(overrides?: UnsignedTransaction): Promise<string[]>;

    excludeSenders(overrides?: UnsignedTransaction): Promise<string[]>;

    "excludeSenders()"(overrides?: UnsignedTransaction): Promise<string[]>;

    failed(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "failed()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    setUp(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "setUp()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    targetArtifactSelectors(
      overrides?: UnsignedTransaction
    ): Promise<([string, string[]] & { addr: string; selectors: string[] })[]>;

    "targetArtifactSelectors()"(
      overrides?: UnsignedTransaction
    ): Promise<([string, string[]] & { addr: string; selectors: string[] })[]>;

    targetArtifacts(overrides?: UnsignedTransaction): Promise<string[]>;

    "targetArtifacts()"(overrides?: UnsignedTransaction): Promise<string[]>;

    targetContracts(overrides?: UnsignedTransaction): Promise<string[]>;

    "targetContracts()"(overrides?: UnsignedTransaction): Promise<string[]>;

    targetSelectors(
      overrides?: UnsignedTransaction
    ): Promise<([string, string[]] & { addr: string; selectors: string[] })[]>;

    "targetSelectors()"(
      overrides?: UnsignedTransaction
    ): Promise<([string, string[]] & { addr: string; selectors: string[] })[]>;

    targetSenders(overrides?: UnsignedTransaction): Promise<string[]>;

    "targetSenders()"(overrides?: UnsignedTransaction): Promise<string[]>;

    testEdgeCaseMaxValuedRav(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testEdgeCaseMaxValuedRav()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testEdgeCaseMinValuedRav(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testEdgeCaseMinValuedRav()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testInvalidSignature(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testInvalidSignature()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testRAVInvalidAllocationID(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testRAVInvalidAllocationID()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testRAVInvalidTimestamp(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testRAVInvalidTimestamp()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testRAVInvalidValueAggregate(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testRAVInvalidValueAggregate()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testRecoverSignature(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testRecoverSignature()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testSampledValidRAV(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testSampledValidRAV()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;
  };

  IS_TEST(overrides?: UnsignedTransaction): Promise<boolean>;

  "IS_TEST()"(overrides?: UnsignedTransaction): Promise<boolean>;

  excludeArtifacts(overrides?: UnsignedTransaction): Promise<string[]>;

  "excludeArtifacts()"(overrides?: UnsignedTransaction): Promise<string[]>;

  excludeContracts(overrides?: UnsignedTransaction): Promise<string[]>;

  "excludeContracts()"(overrides?: UnsignedTransaction): Promise<string[]>;

  excludeSenders(overrides?: UnsignedTransaction): Promise<string[]>;

  "excludeSenders()"(overrides?: UnsignedTransaction): Promise<string[]>;

  failed(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "failed()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  setUp(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "setUp()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  targetArtifactSelectors(
    overrides?: UnsignedTransaction
  ): Promise<([string, string[]] & { addr: string; selectors: string[] })[]>;

  "targetArtifactSelectors()"(
    overrides?: UnsignedTransaction
  ): Promise<([string, string[]] & { addr: string; selectors: string[] })[]>;

  targetArtifacts(overrides?: UnsignedTransaction): Promise<string[]>;

  "targetArtifacts()"(overrides?: UnsignedTransaction): Promise<string[]>;

  targetContracts(overrides?: UnsignedTransaction): Promise<string[]>;

  "targetContracts()"(overrides?: UnsignedTransaction): Promise<string[]>;

  targetSelectors(
    overrides?: UnsignedTransaction
  ): Promise<([string, string[]] & { addr: string; selectors: string[] })[]>;

  "targetSelectors()"(
    overrides?: UnsignedTransaction
  ): Promise<([string, string[]] & { addr: string; selectors: string[] })[]>;

  targetSenders(overrides?: UnsignedTransaction): Promise<string[]>;

  "targetSenders()"(overrides?: UnsignedTransaction): Promise<string[]>;

  testEdgeCaseMaxValuedRav(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testEdgeCaseMaxValuedRav()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testEdgeCaseMinValuedRav(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testEdgeCaseMinValuedRav()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testInvalidSignature(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testInvalidSignature()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testRAVInvalidAllocationID(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testRAVInvalidAllocationID()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testRAVInvalidTimestamp(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testRAVInvalidTimestamp()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testRAVInvalidValueAggregate(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testRAVInvalidValueAggregate()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testRecoverSignature(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testRecoverSignature()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testSampledValidRAV(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testSampledValidRAV()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  filters: {
    log(arg0: null): EventFilter;

    log_address(arg0: null): EventFilter;

    log_array(val: null): EventFilter;

    log_bytes(arg0: null): EventFilter;

    log_bytes32(arg0: null): EventFilter;

    log_int(arg0: null): EventFilter;

    log_named_address(key: null, val: null): EventFilter;

    log_named_array(key: null, val: null): EventFilter;

    log_named_bytes(key: null, val: null): EventFilter;

    log_named_bytes32(key: null, val: null): EventFilter;

    log_named_decimal_int(key: null, val: null, decimals: null): EventFilter;

    log_named_decimal_uint(key: null, val: null, decimals: null): EventFilter;

    log_named_int(key: null, val: null): EventFilter;

    log_named_string(key: null, val: null): EventFilter;

    log_named_uint(key: null, val: null): EventFilter;

    log_string(arg0: null): EventFilter;

    log_uint(arg0: null): EventFilter;

    logs(arg0: null): EventFilter;
  };

  estimate: {
    IS_TEST(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "IS_TEST()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    excludeArtifacts(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "excludeArtifacts()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    excludeContracts(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "excludeContracts()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    excludeSenders(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "excludeSenders()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    failed(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "failed()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    setUp(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "setUp()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    targetArtifactSelectors(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "targetArtifactSelectors()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    targetArtifacts(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "targetArtifacts()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    targetContracts(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "targetContracts()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    targetSelectors(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "targetSelectors()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    targetSenders(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "targetSenders()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    testEdgeCaseMaxValuedRav(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testEdgeCaseMaxValuedRav()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testEdgeCaseMinValuedRav(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testEdgeCaseMinValuedRav()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testInvalidSignature(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "testInvalidSignature()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testRAVInvalidAllocationID(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testRAVInvalidAllocationID()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testRAVInvalidTimestamp(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testRAVInvalidTimestamp()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testRAVInvalidValueAggregate(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testRAVInvalidValueAggregate()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testRecoverSignature(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "testRecoverSignature()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testSampledValidRAV(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "testSampledValidRAV()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
