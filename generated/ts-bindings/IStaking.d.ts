/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface IStakingInterface extends Interface {
  functions: {
    allocate: TypedFunctionDescription<{
      encode([
        _subgraphDeploymentID,
        _tokens,
        _allocationID,
        _metadata,
        _proof,
      ]: [Arrayish, BigNumberish, string, Arrayish, Arrayish]): string;
    }>;

    collect: TypedFunctionDescription<{
      encode([_tokens, _allocationID]: [BigNumberish, string]): string;
    }>;

    getAllocation: TypedFunctionDescription<{
      encode([_allocationID]: [string]): string;
    }>;

    setAssetHolder: TypedFunctionDescription<{
      encode([_assetHolder, _allowed]: [string, boolean]): string;
    }>;

    stake: TypedFunctionDescription<{
      encode([_tokens]: [BigNumberish]): string;
    }>;
  };

  events: {};
}

export class IStaking extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IStaking;
  attach(addressOrName: string): IStaking;
  deployed(): Promise<IStaking>;

  on(event: EventFilter | string, listener: Listener): IStaking;
  once(event: EventFilter | string, listener: Listener): IStaking;
  addListener(eventName: EventFilter | string, listener: Listener): IStaking;
  removeAllListeners(eventName: EventFilter | string): IStaking;
  removeListener(eventName: any, listener: Listener): IStaking;

  interface: IStakingInterface;

  functions: {
    allocate(
      _subgraphDeploymentID: Arrayish,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: Arrayish,
      _proof: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "allocate(bytes32,uint256,address,bytes32,bytes)"(
      _subgraphDeploymentID: Arrayish,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: Arrayish,
      _proof: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    collect(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "collect(uint256,address)"(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getAllocation(
      _allocationID: string,
      overrides?: UnsignedTransaction
    ): Promise<
      [string, string, BigNumber, string, string] & {
        indexer: string;
        _subgraphDeploymentID: string;
        _tokens: BigNumber;
        _allocationID: string;
        _metadata: string;
      }
    >;

    "getAllocation(address)"(
      _allocationID: string,
      overrides?: UnsignedTransaction
    ): Promise<
      [string, string, BigNumber, string, string] & {
        indexer: string;
        _subgraphDeploymentID: string;
        _tokens: BigNumber;
        _allocationID: string;
        _metadata: string;
      }
    >;

    setAssetHolder(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setAssetHolder(address,bool)"(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    stake(
      _tokens: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "stake(uint256)"(
      _tokens: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;
  };

  allocate(
    _subgraphDeploymentID: Arrayish,
    _tokens: BigNumberish,
    _allocationID: string,
    _metadata: Arrayish,
    _proof: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "allocate(bytes32,uint256,address,bytes32,bytes)"(
    _subgraphDeploymentID: Arrayish,
    _tokens: BigNumberish,
    _allocationID: string,
    _metadata: Arrayish,
    _proof: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  collect(
    _tokens: BigNumberish,
    _allocationID: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "collect(uint256,address)"(
    _tokens: BigNumberish,
    _allocationID: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getAllocation(
    _allocationID: string,
    overrides?: UnsignedTransaction
  ): Promise<
    [string, string, BigNumber, string, string] & {
      indexer: string;
      _subgraphDeploymentID: string;
      _tokens: BigNumber;
      _allocationID: string;
      _metadata: string;
    }
  >;

  "getAllocation(address)"(
    _allocationID: string,
    overrides?: UnsignedTransaction
  ): Promise<
    [string, string, BigNumber, string, string] & {
      indexer: string;
      _subgraphDeploymentID: string;
      _tokens: BigNumber;
      _allocationID: string;
      _metadata: string;
    }
  >;

  setAssetHolder(
    _assetHolder: string,
    _allowed: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setAssetHolder(address,bool)"(
    _assetHolder: string,
    _allowed: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  stake(
    _tokens: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "stake(uint256)"(
    _tokens: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    allocate(
      _subgraphDeploymentID: Arrayish,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: Arrayish,
      _proof: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "allocate(bytes32,uint256,address,bytes32,bytes)"(
      _subgraphDeploymentID: Arrayish,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: Arrayish,
      _proof: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    collect(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "collect(uint256,address)"(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getAllocation(
      _allocationID: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getAllocation(address)"(
      _allocationID: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setAssetHolder(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setAssetHolder(address,bool)"(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    stake(
      _tokens: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "stake(uint256)"(
      _tokens: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
