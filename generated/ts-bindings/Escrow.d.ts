/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface EscrowInterface extends Interface {
  functions: {
    MAX_THAWING_PERIOD: TypedFunctionDescription<{ encode([]: []): string }>;

    allocationIDTracker: TypedFunctionDescription<{ encode([]: []): string }>;

    authorizeSigner: TypedFunctionDescription<{
      encode([signer, proofDeadline, proof]: [
        string,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    authorizedSigners: TypedFunctionDescription<{
      encode([signer]: [string]): string;
    }>;

    cancelThawSigner: TypedFunctionDescription<{
      encode([signer]: [string]): string;
    }>;

    deposit: TypedFunctionDescription<{
      encode([receiver, amount]: [string, BigNumberish]): string;
    }>;

    depositMany: TypedFunctionDescription<{
      encode([receivers, amounts]: [string[], BigNumberish[]]): string;
    }>;

    escrowAccounts: TypedFunctionDescription<{
      encode([sender, receiver]: [string, string]): string;
    }>;

    escrowToken: TypedFunctionDescription<{ encode([]: []): string }>;

    getEscrowAccountFromSignerAddress: TypedFunctionDescription<{
      encode([signer, receiver]: [string, string]): string;
    }>;

    getEscrowAmount: TypedFunctionDescription<{
      encode([sender, receiver]: [string, string]): string;
    }>;

    redeem: TypedFunctionDescription<{
      encode([signedRAV, allocationIDProof]: [
        {
          rav: {
            allocationId: string;
            timestampNs: BigNumberish;
            valueAggregate: BigNumberish;
          };
          signature: Arrayish;
        },
        Arrayish
      ]): string;
    }>;

    revokeAuthorizedSigner: TypedFunctionDescription<{
      encode([signer]: [string]): string;
    }>;

    revokeSignerThawingPeriod: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    staking: TypedFunctionDescription<{ encode([]: []): string }>;

    tapVerifier: TypedFunctionDescription<{ encode([]: []): string }>;

    thaw: TypedFunctionDescription<{
      encode([receiver, amount]: [string, BigNumberish]): string;
    }>;

    thawSigner: TypedFunctionDescription<{
      encode([signer]: [string]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([receiver]: [string]): string;
    }>;

    withdrawEscrowThawingPeriod: TypedFunctionDescription<{
      encode([]: []): string;
    }>;
  };

  events: {
    AuthorizeSigner: TypedEventDescription<{
      encodeTopics([signer, sender]: [string | null, string | null]): string[];
    }>;

    CancelThaw: TypedEventDescription<{
      encodeTopics([sender, receiver]: [
        string | null,
        string | null
      ]): string[];
    }>;

    CancelThawSigner: TypedEventDescription<{
      encodeTopics([sender, authorizedSigner, thawEndTimestamp]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Deposit: TypedEventDescription<{
      encodeTopics([sender, receiver, amount]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Redeem: TypedEventDescription<{
      encodeTopics([
        sender,
        receiver,
        allocationID,
        expectedAmount,
        actualAmount,
      ]: [string | null, string | null, string | null, null, null]): string[];
    }>;

    RevokeAuthorizedSigner: TypedEventDescription<{
      encodeTopics([sender, authorizedSigner]: [
        string | null,
        string | null
      ]): string[];
    }>;

    Thaw: TypedEventDescription<{
      encodeTopics([
        sender,
        receiver,
        amount,
        totalAmountThawing,
        thawEndTimestamp,
      ]: [string | null, string | null, null, null, null]): string[];
    }>;

    ThawSigner: TypedEventDescription<{
      encodeTopics([sender, authorizedSigner, thawEndTimestamp]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Withdraw: TypedEventDescription<{
      encodeTopics([sender, receiver, amount]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class Escrow extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Escrow;
  attach(addressOrName: string): Escrow;
  deployed(): Promise<Escrow>;

  on(event: EventFilter | string, listener: Listener): Escrow;
  once(event: EventFilter | string, listener: Listener): Escrow;
  addListener(eventName: EventFilter | string, listener: Listener): Escrow;
  removeAllListeners(eventName: EventFilter | string): Escrow;
  removeListener(eventName: any, listener: Listener): Escrow;

  interface: EscrowInterface;

  functions: {
    MAX_THAWING_PERIOD(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "MAX_THAWING_PERIOD()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    allocationIDTracker(overrides?: UnsignedTransaction): Promise<string>;

    "allocationIDTracker()"(overrides?: UnsignedTransaction): Promise<string>;

    authorizeSigner(
      signer: string,
      proofDeadline: BigNumberish,
      proof: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "authorizeSigner(address,uint256,bytes)"(
      signer: string,
      proofDeadline: BigNumberish,
      proof: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    authorizedSigners(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<
      [string, BigNumber] & { sender: string; thawEndTimestamp: BigNumber }
    >;

    "authorizedSigners(address)"(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<
      [string, BigNumber] & { sender: string; thawEndTimestamp: BigNumber }
    >;

    cancelThawSigner(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "cancelThawSigner(address)"(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    deposit(
      receiver: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "deposit(address,uint256)"(
      receiver: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    depositMany(
      receivers: string[],
      amounts: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "depositMany(address[],uint256[])"(
      receivers: string[],
      amounts: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    escrowAccounts(
      sender: string,
      receiver: string,
      overrides?: UnsignedTransaction
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        amountThawing: BigNumber;
        thawEndTimestamp: BigNumber;
      }
    >;

    "escrowAccounts(address,address)"(
      sender: string,
      receiver: string,
      overrides?: UnsignedTransaction
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        amountThawing: BigNumber;
        thawEndTimestamp: BigNumber;
      }
    >;

    escrowToken(overrides?: UnsignedTransaction): Promise<string>;

    "escrowToken()"(overrides?: UnsignedTransaction): Promise<string>;

    getEscrowAccountFromSignerAddress(
      signer: string,
      receiver: string,
      overrides?: UnsignedTransaction
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        amountThawing: BigNumber;
        thawEndTimestamp: BigNumber;
      }
    >;

    "getEscrowAccountFromSignerAddress(address,address)"(
      signer: string,
      receiver: string,
      overrides?: UnsignedTransaction
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        amountThawing: BigNumber;
        thawEndTimestamp: BigNumber;
      }
    >;

    getEscrowAmount(
      sender: string,
      receiver: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getEscrowAmount(address,address)"(
      sender: string,
      receiver: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    redeem(
      signedRAV: {
        rav: {
          allocationId: string;
          timestampNs: BigNumberish;
          valueAggregate: BigNumberish;
        };
        signature: Arrayish;
      },
      allocationIDProof: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "redeem(((address,uint64,uint128),bytes),bytes)"(
      signedRAV: {
        rav: {
          allocationId: string;
          timestampNs: BigNumberish;
          valueAggregate: BigNumberish;
        };
        signature: Arrayish;
      },
      allocationIDProof: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    revokeAuthorizedSigner(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "revokeAuthorizedSigner(address)"(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    revokeSignerThawingPeriod(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "revokeSignerThawingPeriod()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    staking(overrides?: UnsignedTransaction): Promise<string>;

    "staking()"(overrides?: UnsignedTransaction): Promise<string>;

    tapVerifier(overrides?: UnsignedTransaction): Promise<string>;

    "tapVerifier()"(overrides?: UnsignedTransaction): Promise<string>;

    thaw(
      receiver: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "thaw(address,uint256)"(
      receiver: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    thawSigner(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "thawSigner(address)"(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    withdraw(
      receiver: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "withdraw(address)"(
      receiver: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    withdrawEscrowThawingPeriod(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "withdrawEscrowThawingPeriod()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };

  MAX_THAWING_PERIOD(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "MAX_THAWING_PERIOD()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  allocationIDTracker(overrides?: UnsignedTransaction): Promise<string>;

  "allocationIDTracker()"(overrides?: UnsignedTransaction): Promise<string>;

  authorizeSigner(
    signer: string,
    proofDeadline: BigNumberish,
    proof: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "authorizeSigner(address,uint256,bytes)"(
    signer: string,
    proofDeadline: BigNumberish,
    proof: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  authorizedSigners(
    signer: string,
    overrides?: UnsignedTransaction
  ): Promise<
    [string, BigNumber] & { sender: string; thawEndTimestamp: BigNumber }
  >;

  "authorizedSigners(address)"(
    signer: string,
    overrides?: UnsignedTransaction
  ): Promise<
    [string, BigNumber] & { sender: string; thawEndTimestamp: BigNumber }
  >;

  cancelThawSigner(
    signer: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "cancelThawSigner(address)"(
    signer: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  deposit(
    receiver: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "deposit(address,uint256)"(
    receiver: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  depositMany(
    receivers: string[],
    amounts: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "depositMany(address[],uint256[])"(
    receivers: string[],
    amounts: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  escrowAccounts(
    sender: string,
    receiver: string,
    overrides?: UnsignedTransaction
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      amountThawing: BigNumber;
      thawEndTimestamp: BigNumber;
    }
  >;

  "escrowAccounts(address,address)"(
    sender: string,
    receiver: string,
    overrides?: UnsignedTransaction
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      amountThawing: BigNumber;
      thawEndTimestamp: BigNumber;
    }
  >;

  escrowToken(overrides?: UnsignedTransaction): Promise<string>;

  "escrowToken()"(overrides?: UnsignedTransaction): Promise<string>;

  getEscrowAccountFromSignerAddress(
    signer: string,
    receiver: string,
    overrides?: UnsignedTransaction
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      amountThawing: BigNumber;
      thawEndTimestamp: BigNumber;
    }
  >;

  "getEscrowAccountFromSignerAddress(address,address)"(
    signer: string,
    receiver: string,
    overrides?: UnsignedTransaction
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      amountThawing: BigNumber;
      thawEndTimestamp: BigNumber;
    }
  >;

  getEscrowAmount(
    sender: string,
    receiver: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getEscrowAmount(address,address)"(
    sender: string,
    receiver: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  redeem(
    signedRAV: {
      rav: {
        allocationId: string;
        timestampNs: BigNumberish;
        valueAggregate: BigNumberish;
      };
      signature: Arrayish;
    },
    allocationIDProof: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "redeem(((address,uint64,uint128),bytes),bytes)"(
    signedRAV: {
      rav: {
        allocationId: string;
        timestampNs: BigNumberish;
        valueAggregate: BigNumberish;
      };
      signature: Arrayish;
    },
    allocationIDProof: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  revokeAuthorizedSigner(
    signer: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "revokeAuthorizedSigner(address)"(
    signer: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  revokeSignerThawingPeriod(
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "revokeSignerThawingPeriod()"(
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  staking(overrides?: UnsignedTransaction): Promise<string>;

  "staking()"(overrides?: UnsignedTransaction): Promise<string>;

  tapVerifier(overrides?: UnsignedTransaction): Promise<string>;

  "tapVerifier()"(overrides?: UnsignedTransaction): Promise<string>;

  thaw(
    receiver: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "thaw(address,uint256)"(
    receiver: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  thawSigner(
    signer: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "thawSigner(address)"(
    signer: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  withdraw(
    receiver: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "withdraw(address)"(
    receiver: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  withdrawEscrowThawingPeriod(
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "withdrawEscrowThawingPeriod()"(
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  filters: {
    AuthorizeSigner(signer: string | null, sender: string | null): EventFilter;

    CancelThaw(sender: string | null, receiver: string | null): EventFilter;

    CancelThawSigner(
      sender: string | null,
      authorizedSigner: string | null,
      thawEndTimestamp: null
    ): EventFilter;

    Deposit(
      sender: string | null,
      receiver: string | null,
      amount: null
    ): EventFilter;

    Redeem(
      sender: string | null,
      receiver: string | null,
      allocationID: string | null,
      expectedAmount: null,
      actualAmount: null
    ): EventFilter;

    RevokeAuthorizedSigner(
      sender: string | null,
      authorizedSigner: string | null
    ): EventFilter;

    Thaw(
      sender: string | null,
      receiver: string | null,
      amount: null,
      totalAmountThawing: null,
      thawEndTimestamp: null
    ): EventFilter;

    ThawSigner(
      sender: string | null,
      authorizedSigner: string | null,
      thawEndTimestamp: null
    ): EventFilter;

    Withdraw(
      sender: string | null,
      receiver: string | null,
      amount: null
    ): EventFilter;
  };

  estimate: {
    MAX_THAWING_PERIOD(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "MAX_THAWING_PERIOD()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    allocationIDTracker(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "allocationIDTracker()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    authorizeSigner(
      signer: string,
      proofDeadline: BigNumberish,
      proof: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "authorizeSigner(address,uint256,bytes)"(
      signer: string,
      proofDeadline: BigNumberish,
      proof: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    authorizedSigners(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "authorizedSigners(address)"(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    cancelThawSigner(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "cancelThawSigner(address)"(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    deposit(
      receiver: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "deposit(address,uint256)"(
      receiver: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    depositMany(
      receivers: string[],
      amounts: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "depositMany(address[],uint256[])"(
      receivers: string[],
      amounts: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    escrowAccounts(
      sender: string,
      receiver: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "escrowAccounts(address,address)"(
      sender: string,
      receiver: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    escrowToken(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "escrowToken()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getEscrowAccountFromSignerAddress(
      signer: string,
      receiver: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getEscrowAccountFromSignerAddress(address,address)"(
      signer: string,
      receiver: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getEscrowAmount(
      sender: string,
      receiver: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getEscrowAmount(address,address)"(
      sender: string,
      receiver: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    redeem(
      signedRAV: {
        rav: {
          allocationId: string;
          timestampNs: BigNumberish;
          valueAggregate: BigNumberish;
        };
        signature: Arrayish;
      },
      allocationIDProof: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "redeem(((address,uint64,uint128),bytes),bytes)"(
      signedRAV: {
        rav: {
          allocationId: string;
          timestampNs: BigNumberish;
          valueAggregate: BigNumberish;
        };
        signature: Arrayish;
      },
      allocationIDProof: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    revokeAuthorizedSigner(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "revokeAuthorizedSigner(address)"(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    revokeSignerThawingPeriod(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "revokeSignerThawingPeriod()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    staking(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "staking()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    tapVerifier(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "tapVerifier()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    thaw(
      receiver: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "thaw(address,uint256)"(
      receiver: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    thawSigner(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "thawSigner(address)"(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    withdraw(
      receiver: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "withdraw(address)"(
      receiver: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    withdrawEscrowThawingPeriod(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "withdrawEscrowThawingPeriod()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
