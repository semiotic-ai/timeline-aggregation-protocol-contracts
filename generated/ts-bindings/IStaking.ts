/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IStaking {
  export type AllocationStruct = {
    indexer: string;
    _subgraphDeploymentID: BytesLike;
    _tokens: BigNumberish;
    _allocationID: string;
    _metadata: BytesLike;
  };

  export type AllocationStructOutput = [
    string,
    string,
    BigNumber,
    string,
    string
  ] & {
    indexer: string;
    _subgraphDeploymentID: string;
    _tokens: BigNumber;
    _allocationID: string;
    _metadata: string;
  };
}

export interface IStakingInterface extends utils.Interface {
  functions: {
    "allocate(bytes32,uint256,address,bytes32,bytes)": FunctionFragment;
    "collect(uint256,address)": FunctionFragment;
    "getAllocation(address)": FunctionFragment;
    "setAssetHolder(address,bool)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allocate"
      | "collect"
      | "getAllocation"
      | "setAssetHolder"
      | "stake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allocate",
    values: [BytesLike, BigNumberish, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetHolder",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;

  events: {};
}

export interface IStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allocate(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    collect(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<[IStaking.AllocationStructOutput]>;

    setAssetHolder(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake(
      _tokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  allocate(
    _subgraphDeploymentID: BytesLike,
    _tokens: BigNumberish,
    _allocationID: string,
    _metadata: BytesLike,
    _proof: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  collect(
    _tokens: BigNumberish,
    _allocationID: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAllocation(
    _allocationID: string,
    overrides?: CallOverrides
  ): Promise<IStaking.AllocationStructOutput>;

  setAssetHolder(
    _assetHolder: string,
    _allowed: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake(
    _tokens: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    allocate(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    collect(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<IStaking.AllocationStructOutput>;

    setAssetHolder(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(_tokens: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    allocate(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    collect(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAssetHolder(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stake(
      _tokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocate(
      _subgraphDeploymentID: BytesLike,
      _tokens: BigNumberish,
      _allocationID: string,
      _metadata: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    collect(
      _tokens: BigNumberish,
      _allocationID: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAllocation(
      _allocationID: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAssetHolder(
      _assetHolder: string,
      _allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake(
      _tokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
