/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface AllocationIDTrackerInterface extends Interface {
  functions: {
    isAllocationIDUsed: TypedFunctionDescription<{
      encode([sender, allocationID]: [string, string]): string;
    }>;

    useAllocationID: TypedFunctionDescription<{
      encode([sender, allocationID, proof]: [string, string, Arrayish]): string;
    }>;
  };

  events: {
    AllocationIDUsed: TypedEventDescription<{
      encodeTopics([sender, allocationID]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class AllocationIDTracker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): AllocationIDTracker;
  attach(addressOrName: string): AllocationIDTracker;
  deployed(): Promise<AllocationIDTracker>;

  on(event: EventFilter | string, listener: Listener): AllocationIDTracker;
  once(event: EventFilter | string, listener: Listener): AllocationIDTracker;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): AllocationIDTracker;
  removeAllListeners(eventName: EventFilter | string): AllocationIDTracker;
  removeListener(eventName: any, listener: Listener): AllocationIDTracker;

  interface: AllocationIDTrackerInterface;

  functions: {
    isAllocationIDUsed(
      sender: string,
      allocationID: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "isAllocationIDUsed(address,address)"(
      sender: string,
      allocationID: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    useAllocationID(
      sender: string,
      allocationID: string,
      proof: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "useAllocationID(address,address,bytes)"(
      sender: string,
      allocationID: string,
      proof: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;
  };

  isAllocationIDUsed(
    sender: string,
    allocationID: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "isAllocationIDUsed(address,address)"(
    sender: string,
    allocationID: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  useAllocationID(
    sender: string,
    allocationID: string,
    proof: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "useAllocationID(address,address,bytes)"(
    sender: string,
    allocationID: string,
    proof: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  filters: {
    AllocationIDUsed(
      sender: string | null,
      allocationID: string | null
    ): EventFilter;
  };

  estimate: {
    isAllocationIDUsed(
      sender: string,
      allocationID: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "isAllocationIDUsed(address,address)"(
      sender: string,
      allocationID: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    useAllocationID(
      sender: string,
      allocationID: string,
      proof: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "useAllocationID(address,address,bytes)"(
      sender: string,
      allocationID: string,
      proof: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
