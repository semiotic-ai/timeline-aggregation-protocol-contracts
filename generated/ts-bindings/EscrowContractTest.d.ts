/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface EscrowContractTestInterface extends Interface {
  functions: {
    IS_TEST: TypedFunctionDescription<{ encode([]: []): string }>;

    createAllocation: TypedFunctionDescription<{ encode([]: []): string }>;

    defineDebugLabels: TypedFunctionDescription<{ encode([]: []): string }>;

    deployContracts: TypedFunctionDescription<{ encode([]: []): string }>;

    depositEscrow: TypedFunctionDescription<{
      encode([sender, receiver, amount]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    depositManyEscrow: TypedFunctionDescription<{
      encode([sender, receivers, amounts, expectSucceed]: [
        string,
        string[],
        BigNumberish[],
        boolean
      ]): string;
    }>;

    excludeArtifacts: TypedFunctionDescription<{ encode([]: []): string }>;

    excludeContracts: TypedFunctionDescription<{ encode([]: []): string }>;

    excludeSenders: TypedFunctionDescription<{ encode([]: []): string }>;

    failed: TypedFunctionDescription<{ encode([]: []): string }>;

    generateKeys: TypedFunctionDescription<{ encode([]: []): string }>;

    integrationTestSetup: TypedFunctionDescription<{ encode([]: []): string }>;

    setUp: TypedFunctionDescription<{ encode([]: []): string }>;

    targetArtifactSelectors: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    targetArtifacts: TypedFunctionDescription<{ encode([]: []): string }>;

    targetContracts: TypedFunctionDescription<{ encode([]: []): string }>;

    targetSelectors: TypedFunctionDescription<{ encode([]: []): string }>;

    targetSenders: TypedFunctionDescription<{ encode([]: []): string }>;

    testCancelThawSignerSignerNotAuthorizedBySender: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testConstructorInputValidation: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testDepositFunds: TypedFunctionDescription<{ encode([]: []): string }>;

    testDepositManyFunds: TypedFunctionDescription<{ encode([]: []): string }>;

    testDepositManyFundsWithLengthMismatch: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testDuplicateAllocationID: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testGetEscrowAmount: TypedFunctionDescription<{ encode([]: []): string }>;

    testGetEscrowFromSignerAddress: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testInvalidAuthorizeSignerProof: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testInvalidSignerProof: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testMultipleThawRequests: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testRedeemRAVInvalidProof: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testRedeemRAVSignedByAuthorizedSigner: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testRedeemRAVWithInvalidSignature: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testRedeemRAVWithValueGreaterThanAvailableEscrow: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testRevokeAuthorizedSigner: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testSignerAlreadyAuthorized: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testSignerNotAuthorizedGetEscrowFromSignerAddress: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testSignerStillThawing: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testThawReduce: TypedFunctionDescription<{ encode([]: []): string }>;

    testThawRevertInsufficientEscrow: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testThawRevertInsufficientThawAmount: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testThawSignerSignerNotAuthorizedBySender: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    testWithdrawFundsAfterFreezePeriod: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    transferTokens: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    AuthorizeSigner: TypedEventDescription<{
      encodeTopics([signer, sender]: [string | null, string | null]): string[];
    }>;

    CancelThaw: TypedEventDescription<{
      encodeTopics([sender, receiver]: [
        string | null,
        string | null
      ]): string[];
    }>;

    CancelThawSigner: TypedEventDescription<{
      encodeTopics([sender, authorizedSigner, thawEndTimestamp]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Deposit: TypedEventDescription<{
      encodeTopics([sender, receiver, amount]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    DepositAssigned: TypedEventDescription<{
      encodeTopics([sender, receiver, amount]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Redeem: TypedEventDescription<{
      encodeTopics([
        sender,
        receiver,
        allocationID,
        expectedAmount,
        actualAmount,
      ]: [string | null, string | null, string | null, null, null]): string[];
    }>;

    RevokeAuthorizedSigner: TypedEventDescription<{
      encodeTopics([sender, authorizedSigner]: [
        string | null,
        string | null
      ]): string[];
    }>;

    Thaw: TypedEventDescription<{
      encodeTopics([
        sender,
        receiver,
        amount,
        totalAmountThawing,
        thawEndTimestamp,
      ]: [string | null, string | null, null, null, null]): string[];
    }>;

    ThawSigner: TypedEventDescription<{
      encodeTopics([sender, authorizedSigner, thawEndTimestamp]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    UnassignedDeposit: TypedEventDescription<{
      encodeTopics([depositor, sender, amount]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Withdraw: TypedEventDescription<{
      encodeTopics([sender, receiver, amount]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    log: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    log_address: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    log_array: TypedEventDescription<{ encodeTopics([val]: [null]): string[] }>;

    log_bytes: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    log_bytes32: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    log_int: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    log_named_address: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_named_array: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_named_bytes: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_named_bytes32: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_named_decimal_int: TypedEventDescription<{
      encodeTopics([key, val, decimals]: [null, null, null]): string[];
    }>;

    log_named_decimal_uint: TypedEventDescription<{
      encodeTopics([key, val, decimals]: [null, null, null]): string[];
    }>;

    log_named_int: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_named_string: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_named_uint: TypedEventDescription<{
      encodeTopics([key, val]: [null, null]): string[];
    }>;

    log_string: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    log_uint: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;

    logs: TypedEventDescription<{ encodeTopics([]: [null]): string[] }>;
  };
}

export class EscrowContractTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): EscrowContractTest;
  attach(addressOrName: string): EscrowContractTest;
  deployed(): Promise<EscrowContractTest>;

  on(event: EventFilter | string, listener: Listener): EscrowContractTest;
  once(event: EventFilter | string, listener: Listener): EscrowContractTest;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): EscrowContractTest;
  removeAllListeners(eventName: EventFilter | string): EscrowContractTest;
  removeListener(eventName: any, listener: Listener): EscrowContractTest;

  interface: EscrowContractTestInterface;

  functions: {
    IS_TEST(overrides?: UnsignedTransaction): Promise<boolean>;

    "IS_TEST()"(overrides?: UnsignedTransaction): Promise<boolean>;

    createAllocation(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "createAllocation()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    defineDebugLabels(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "defineDebugLabels()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    deployContracts(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "deployContracts()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    depositEscrow(
      sender: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "depositEscrow(address,address,uint256)"(
      sender: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    depositManyEscrow(
      sender: string,
      receivers: string[],
      amounts: BigNumberish[],
      expectSucceed: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "depositManyEscrow(address,address[],uint256[],bool)"(
      sender: string,
      receivers: string[],
      amounts: BigNumberish[],
      expectSucceed: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    excludeArtifacts(overrides?: UnsignedTransaction): Promise<string[]>;

    "excludeArtifacts()"(overrides?: UnsignedTransaction): Promise<string[]>;

    excludeContracts(overrides?: UnsignedTransaction): Promise<string[]>;

    "excludeContracts()"(overrides?: UnsignedTransaction): Promise<string[]>;

    excludeSenders(overrides?: UnsignedTransaction): Promise<string[]>;

    "excludeSenders()"(overrides?: UnsignedTransaction): Promise<string[]>;

    failed(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "failed()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    generateKeys(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "generateKeys()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    integrationTestSetup(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "integrationTestSetup()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setUp(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "setUp()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    targetArtifactSelectors(
      overrides?: UnsignedTransaction
    ): Promise<([string, string[]] & { addr: string; selectors: string[] })[]>;

    "targetArtifactSelectors()"(
      overrides?: UnsignedTransaction
    ): Promise<([string, string[]] & { addr: string; selectors: string[] })[]>;

    targetArtifacts(overrides?: UnsignedTransaction): Promise<string[]>;

    "targetArtifacts()"(overrides?: UnsignedTransaction): Promise<string[]>;

    targetContracts(overrides?: UnsignedTransaction): Promise<string[]>;

    "targetContracts()"(overrides?: UnsignedTransaction): Promise<string[]>;

    targetSelectors(
      overrides?: UnsignedTransaction
    ): Promise<([string, string[]] & { addr: string; selectors: string[] })[]>;

    "targetSelectors()"(
      overrides?: UnsignedTransaction
    ): Promise<([string, string[]] & { addr: string; selectors: string[] })[]>;

    targetSenders(overrides?: UnsignedTransaction): Promise<string[]>;

    "targetSenders()"(overrides?: UnsignedTransaction): Promise<string[]>;

    testCancelThawSignerSignerNotAuthorizedBySender(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testCancelThawSignerSignerNotAuthorizedBySender()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testConstructorInputValidation(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testConstructorInputValidation()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testDepositFunds(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testDepositFunds()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testDepositManyFunds(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testDepositManyFunds()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testDepositManyFundsWithLengthMismatch(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testDepositManyFundsWithLengthMismatch()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testDuplicateAllocationID(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testDuplicateAllocationID()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testGetEscrowAmount(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testGetEscrowAmount()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testGetEscrowFromSignerAddress(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testGetEscrowFromSignerAddress()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testInvalidAuthorizeSignerProof(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testInvalidAuthorizeSignerProof()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testInvalidSignerProof(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testInvalidSignerProof()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testMultipleThawRequests(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testMultipleThawRequests()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testRedeemRAVInvalidProof(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testRedeemRAVInvalidProof()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testRedeemRAVSignedByAuthorizedSigner(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testRedeemRAVSignedByAuthorizedSigner()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testRedeemRAVWithInvalidSignature(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testRedeemRAVWithInvalidSignature()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testRedeemRAVWithValueGreaterThanAvailableEscrow(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testRedeemRAVWithValueGreaterThanAvailableEscrow()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testRevokeAuthorizedSigner(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testRevokeAuthorizedSigner()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testSignerAlreadyAuthorized(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testSignerAlreadyAuthorized()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testSignerNotAuthorizedGetEscrowFromSignerAddress(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testSignerNotAuthorizedGetEscrowFromSignerAddress()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testSignerStillThawing(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testSignerStillThawing()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testThawReduce(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testThawReduce()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testThawRevertInsufficientEscrow(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testThawRevertInsufficientEscrow()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testThawRevertInsufficientThawAmount(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testThawRevertInsufficientThawAmount()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testThawSignerSignerNotAuthorizedBySender(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testThawSignerSignerNotAuthorizedBySender()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    testWithdrawFundsAfterFreezePeriod(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "testWithdrawFundsAfterFreezePeriod()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    transferTokens(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferTokens()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;
  };

  IS_TEST(overrides?: UnsignedTransaction): Promise<boolean>;

  "IS_TEST()"(overrides?: UnsignedTransaction): Promise<boolean>;

  createAllocation(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "createAllocation()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  defineDebugLabels(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "defineDebugLabels()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  deployContracts(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "deployContracts()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  depositEscrow(
    sender: string,
    receiver: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "depositEscrow(address,address,uint256)"(
    sender: string,
    receiver: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  depositManyEscrow(
    sender: string,
    receivers: string[],
    amounts: BigNumberish[],
    expectSucceed: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "depositManyEscrow(address,address[],uint256[],bool)"(
    sender: string,
    receivers: string[],
    amounts: BigNumberish[],
    expectSucceed: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  excludeArtifacts(overrides?: UnsignedTransaction): Promise<string[]>;

  "excludeArtifacts()"(overrides?: UnsignedTransaction): Promise<string[]>;

  excludeContracts(overrides?: UnsignedTransaction): Promise<string[]>;

  "excludeContracts()"(overrides?: UnsignedTransaction): Promise<string[]>;

  excludeSenders(overrides?: UnsignedTransaction): Promise<string[]>;

  "excludeSenders()"(overrides?: UnsignedTransaction): Promise<string[]>;

  failed(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "failed()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  generateKeys(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "generateKeys()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  integrationTestSetup(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "integrationTestSetup()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setUp(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "setUp()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  targetArtifactSelectors(
    overrides?: UnsignedTransaction
  ): Promise<([string, string[]] & { addr: string; selectors: string[] })[]>;

  "targetArtifactSelectors()"(
    overrides?: UnsignedTransaction
  ): Promise<([string, string[]] & { addr: string; selectors: string[] })[]>;

  targetArtifacts(overrides?: UnsignedTransaction): Promise<string[]>;

  "targetArtifacts()"(overrides?: UnsignedTransaction): Promise<string[]>;

  targetContracts(overrides?: UnsignedTransaction): Promise<string[]>;

  "targetContracts()"(overrides?: UnsignedTransaction): Promise<string[]>;

  targetSelectors(
    overrides?: UnsignedTransaction
  ): Promise<([string, string[]] & { addr: string; selectors: string[] })[]>;

  "targetSelectors()"(
    overrides?: UnsignedTransaction
  ): Promise<([string, string[]] & { addr: string; selectors: string[] })[]>;

  targetSenders(overrides?: UnsignedTransaction): Promise<string[]>;

  "targetSenders()"(overrides?: UnsignedTransaction): Promise<string[]>;

  testCancelThawSignerSignerNotAuthorizedBySender(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testCancelThawSignerSignerNotAuthorizedBySender()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testConstructorInputValidation(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testConstructorInputValidation()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testDepositFunds(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testDepositFunds()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testDepositManyFunds(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testDepositManyFunds()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testDepositManyFundsWithLengthMismatch(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testDepositManyFundsWithLengthMismatch()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testDuplicateAllocationID(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testDuplicateAllocationID()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testGetEscrowAmount(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testGetEscrowAmount()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testGetEscrowFromSignerAddress(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testGetEscrowFromSignerAddress()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testInvalidAuthorizeSignerProof(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testInvalidAuthorizeSignerProof()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testInvalidSignerProof(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testInvalidSignerProof()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testMultipleThawRequests(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testMultipleThawRequests()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testRedeemRAVInvalidProof(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testRedeemRAVInvalidProof()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testRedeemRAVSignedByAuthorizedSigner(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testRedeemRAVSignedByAuthorizedSigner()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testRedeemRAVWithInvalidSignature(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testRedeemRAVWithInvalidSignature()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testRedeemRAVWithValueGreaterThanAvailableEscrow(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testRedeemRAVWithValueGreaterThanAvailableEscrow()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testRevokeAuthorizedSigner(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testRevokeAuthorizedSigner()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testSignerAlreadyAuthorized(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testSignerAlreadyAuthorized()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testSignerNotAuthorizedGetEscrowFromSignerAddress(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testSignerNotAuthorizedGetEscrowFromSignerAddress()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testSignerStillThawing(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testSignerStillThawing()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testThawReduce(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "testThawReduce()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testThawRevertInsufficientEscrow(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testThawRevertInsufficientEscrow()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testThawRevertInsufficientThawAmount(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testThawRevertInsufficientThawAmount()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testThawSignerSignerNotAuthorizedBySender(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testThawSignerSignerNotAuthorizedBySender()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  testWithdrawFundsAfterFreezePeriod(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "testWithdrawFundsAfterFreezePeriod()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  transferTokens(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "transferTokens()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  filters: {
    AuthorizeSigner(signer: string | null, sender: string | null): EventFilter;

    CancelThaw(sender: string | null, receiver: string | null): EventFilter;

    CancelThawSigner(
      sender: string | null,
      authorizedSigner: string | null,
      thawEndTimestamp: null
    ): EventFilter;

    Deposit(
      sender: string | null,
      receiver: string | null,
      amount: null
    ): EventFilter;

    DepositAssigned(
      sender: string | null,
      receiver: string | null,
      amount: null
    ): EventFilter;

    Redeem(
      sender: string | null,
      receiver: string | null,
      allocationID: string | null,
      expectedAmount: null,
      actualAmount: null
    ): EventFilter;

    RevokeAuthorizedSigner(
      sender: string | null,
      authorizedSigner: string | null
    ): EventFilter;

    Thaw(
      sender: string | null,
      receiver: string | null,
      amount: null,
      totalAmountThawing: null,
      thawEndTimestamp: null
    ): EventFilter;

    ThawSigner(
      sender: string | null,
      authorizedSigner: string | null,
      thawEndTimestamp: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    UnassignedDeposit(
      depositor: string | null,
      sender: string | null,
      amount: null
    ): EventFilter;

    Withdraw(
      sender: string | null,
      receiver: string | null,
      amount: null
    ): EventFilter;

    log(arg0: null): EventFilter;

    log_address(arg0: null): EventFilter;

    log_array(val: null): EventFilter;

    log_bytes(arg0: null): EventFilter;

    log_bytes32(arg0: null): EventFilter;

    log_int(arg0: null): EventFilter;

    log_named_address(key: null, val: null): EventFilter;

    log_named_array(key: null, val: null): EventFilter;

    log_named_bytes(key: null, val: null): EventFilter;

    log_named_bytes32(key: null, val: null): EventFilter;

    log_named_decimal_int(key: null, val: null, decimals: null): EventFilter;

    log_named_decimal_uint(key: null, val: null, decimals: null): EventFilter;

    log_named_int(key: null, val: null): EventFilter;

    log_named_string(key: null, val: null): EventFilter;

    log_named_uint(key: null, val: null): EventFilter;

    log_string(arg0: null): EventFilter;

    log_uint(arg0: null): EventFilter;

    logs(arg0: null): EventFilter;
  };

  estimate: {
    IS_TEST(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "IS_TEST()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    createAllocation(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "createAllocation()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    defineDebugLabels(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "defineDebugLabels()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    deployContracts(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "deployContracts()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    depositEscrow(
      sender: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "depositEscrow(address,address,uint256)"(
      sender: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    depositManyEscrow(
      sender: string,
      receivers: string[],
      amounts: BigNumberish[],
      expectSucceed: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "depositManyEscrow(address,address[],uint256[],bool)"(
      sender: string,
      receivers: string[],
      amounts: BigNumberish[],
      expectSucceed: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    excludeArtifacts(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "excludeArtifacts()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    excludeContracts(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "excludeContracts()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    excludeSenders(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "excludeSenders()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    failed(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "failed()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    generateKeys(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "generateKeys()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    integrationTestSetup(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "integrationTestSetup()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setUp(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "setUp()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    targetArtifactSelectors(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "targetArtifactSelectors()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    targetArtifacts(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "targetArtifacts()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    targetContracts(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "targetContracts()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    targetSelectors(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "targetSelectors()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    targetSenders(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "targetSenders()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    testCancelThawSignerSignerNotAuthorizedBySender(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testCancelThawSignerSignerNotAuthorizedBySender()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testConstructorInputValidation(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testConstructorInputValidation()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testDepositFunds(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "testDepositFunds()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    testDepositManyFunds(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "testDepositManyFunds()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testDepositManyFundsWithLengthMismatch(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testDepositManyFundsWithLengthMismatch()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testDuplicateAllocationID(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testDuplicateAllocationID()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testGetEscrowAmount(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "testGetEscrowAmount()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testGetEscrowFromSignerAddress(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testGetEscrowFromSignerAddress()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testInvalidAuthorizeSignerProof(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testInvalidAuthorizeSignerProof()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testInvalidSignerProof(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "testInvalidSignerProof()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testMultipleThawRequests(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testMultipleThawRequests()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testRedeemRAVInvalidProof(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testRedeemRAVInvalidProof()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testRedeemRAVSignedByAuthorizedSigner(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testRedeemRAVSignedByAuthorizedSigner()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testRedeemRAVWithInvalidSignature(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testRedeemRAVWithInvalidSignature()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testRedeemRAVWithValueGreaterThanAvailableEscrow(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testRedeemRAVWithValueGreaterThanAvailableEscrow()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testRevokeAuthorizedSigner(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testRevokeAuthorizedSigner()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testSignerAlreadyAuthorized(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testSignerAlreadyAuthorized()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testSignerNotAuthorizedGetEscrowFromSignerAddress(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testSignerNotAuthorizedGetEscrowFromSignerAddress()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testSignerStillThawing(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "testSignerStillThawing()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testThawReduce(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "testThawReduce()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    testThawRevertInsufficientEscrow(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testThawRevertInsufficientEscrow()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testThawRevertInsufficientThawAmount(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testThawRevertInsufficientThawAmount()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testThawSignerSignerNotAuthorizedBySender(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testThawSignerSignerNotAuthorizedBySender()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    testWithdrawFundsAfterFreezePeriod(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "testWithdrawFundsAfterFreezePeriod()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferTokens(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "transferTokens()"(overrides?: UnsignedTransaction): Promise<BigNumber>;
  };
}
