/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockStaking, MockStakingInterface } from "../MockStaking";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_token",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "allocate",
    inputs: [
      {
        name: "_subgraphDeploymentID",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_tokens",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_allocationID",
        type: "address",
        internalType: "address",
      },
      {
        name: "_metadata",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_proof",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "collect",
    inputs: [
      {
        name: "_tokens",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_allocationID",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getAllocation",
    inputs: [
      {
        name: "_allocationID",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IStaking.Allocation",
        components: [
          {
            name: "indexer",
            type: "address",
            internalType: "address",
          },
          {
            name: "_subgraphDeploymentID",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "_tokens",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "_allocationID",
            type: "address",
            internalType: "address",
          },
          {
            name: "_metadata",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setAssetHolder",
    inputs: [
      {
        name: "_assetHolder",
        type: "address",
        internalType: "address",
      },
      {
        name: "_allowed",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "stake",
    inputs: [
      {
        name: "_tokens",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "test",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161085d38038061085d83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6107ca806100936000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630e0229231461006757806358d7cf00146101505780638d3c100a1461018b578063a694fc3a1461019e578063a6fe292b146101b1578063f8a8fd6d14610189575b600080fd5b6100fc6100753660046105b9565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b03908116600090815260016020818152604092839020835160a08101855281548616815292810154918301919091526002810154928201929092526003820154909216606083015260040154608082015290565b604051610147919081516001600160a01b0390811682526020808401519083015260408084015190830152606080840151909116908201526080918201519181019190915260a00190565b60405180910390f35b61018961015e3660046105e9565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b005b610189610199366004610620565b6101c4565b6101896101ac36600461064c565b61022c565b6101896101bf366004610665565b610247565b6001600160a01b0381166102085760405162461bcd60e51b815260206004820152600660248201526521616c6c6f6360d01b60448201526064015b60405180910390fd5b81801561022757600054610227906001600160a01b03163330846102d8565b505050565b600054610244906001600160a01b03163330846102d8565b50565b80156102d0576040805160a08101825233815260208082018981528284018981526001600160a01b0389811660608601818152608087018b8152600092835260019687905297909120955186549083166001600160a01b031991821617875593519486019490945590516002850155915160038401805491909316911617905590516004909101555b505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610332908590610338565b50505050565b600061038d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661040d9092919063ffffffff16565b90508051600014806103ae5750808060200190518101906103ae9190610704565b6102275760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101ff565b606061041c8484600085610424565b949350505050565b6060824710156104855760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101ff565b600080866001600160a01b031685876040516104a19190610745565b60006040518083038185875af1925050503d80600081146104de576040519150601f19603f3d011682016040523d82523d6000602084013e6104e3565b606091505b50915091506104f4878383876104ff565b979650505050505050565b6060831561056e578251600003610567576001600160a01b0385163b6105675760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101ff565b508161041c565b61041c83838151156105835781518083602001fd5b8060405162461bcd60e51b81526004016101ff9190610761565b80356001600160a01b03811681146105b457600080fd5b919050565b6000602082840312156105cb57600080fd5b6105d48261059d565b9392505050565b801515811461024457600080fd5b600080604083850312156105fc57600080fd5b6106058361059d565b91506020830135610615816105db565b809150509250929050565b6000806040838503121561063357600080fd5b823591506106436020840161059d565b90509250929050565b60006020828403121561065e57600080fd5b5035919050565b60008060008060008060a0878903121561067e57600080fd5b86359550602087013594506106956040880161059d565b935060608701359250608087013567ffffffffffffffff808211156106b957600080fd5b818901915089601f8301126106cd57600080fd5b8135818111156106dc57600080fd5b8a60208285010111156106ee57600080fd5b6020830194508093505050509295509295509295565b60006020828403121561071657600080fd5b81516105d4816105db565b60005b8381101561073c578181015183820152602001610724565b50506000910152565b60008251610757818460208701610721565b9190910192915050565b6020815260008251806020840152610780816040850160208701610721565b601f01601f1916919091016040019291505056fea2646970667358221220874db3b3625f190b27785791103eded10c25237362b9e4368d07bfc190da39ba64736f6c63430008120033";

type MockStakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockStakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockStaking__factory extends ContractFactory {
  constructor(...args: MockStakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<MockStaking> {
    return super.deploy(_token, overrides || {}) as Promise<MockStaking>;
  }
  override getDeployTransaction(
    _token: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override attach(address: string): MockStaking {
    return super.attach(address) as MockStaking;
  }
  override connect(signer: Signer): MockStaking__factory {
    return super.connect(signer) as MockStaking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockStakingInterface {
    return new utils.Interface(_abi) as MockStakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockStaking {
    return new Contract(address, _abi, signerOrProvider) as MockStaking;
  }
}
