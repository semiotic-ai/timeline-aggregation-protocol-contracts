/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer } from "ethers";
import { Provider } from "ethers/providers";

import { IStaking } from "../IStaking";

export class IStaking__factory {
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IStaking {
    return new Contract(address, _abi, signerOrProvider) as IStaking;
  }
}

const _abi = [
  {
    type: "function",
    name: "allocate",
    inputs: [
      {
        name: "_subgraphDeploymentID",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_tokens",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_allocationID",
        type: "address",
        internalType: "address",
      },
      {
        name: "_metadata",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_proof",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "collect",
    inputs: [
      {
        name: "_tokens",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_allocationID",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getAllocation",
    inputs: [
      {
        name: "_allocationID",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IStaking.Allocation",
        components: [
          {
            name: "indexer",
            type: "address",
            internalType: "address",
          },
          {
            name: "_subgraphDeploymentID",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "_tokens",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "_allocationID",
            type: "address",
            internalType: "address",
          },
          {
            name: "_metadata",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setAssetHolder",
    inputs: [
      {
        name: "_assetHolder",
        type: "address",
        internalType: "address",
      },
      {
        name: "_allowed",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "stake",
    inputs: [
      {
        name: "_tokens",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
];
