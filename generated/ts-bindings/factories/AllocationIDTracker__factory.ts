/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { AllocationIDTracker } from "../AllocationIDTracker";

export class AllocationIDTracker__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: UnsignedTransaction): Promise<AllocationIDTracker> {
    return super.deploy(overrides) as Promise<AllocationIDTracker>;
  }
  getDeployTransaction(overrides?: UnsignedTransaction): UnsignedTransaction {
    return super.getDeployTransaction(overrides);
  }
  attach(address: string): AllocationIDTracker {
    return super.attach(address) as AllocationIDTracker;
  }
  connect(signer: Signer): AllocationIDTracker__factory {
    return super.connect(signer) as AllocationIDTracker__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AllocationIDTracker {
    return new Contract(address, _abi, signerOrProvider) as AllocationIDTracker;
  }
}

const _abi = [
  {
    type: "function",
    name: "isAllocationIDUsed",
    inputs: [
      {
        name: "sender",
        type: "address",
        internalType: "address",
      },
      {
        name: "allocationID",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "useAllocationID",
    inputs: [
      {
        name: "sender",
        type: "address",
        internalType: "address",
      },
      {
        name: "allocationID",
        type: "address",
        internalType: "address",
      },
      {
        name: "proof",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "AllocationIDUsed",
    inputs: [
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "allocationID",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AllocationIDPreviouslyClaimed",
    inputs: [
      {
        name: "sender",
        type: "address",
        internalType: "address",
      },
      {
        name: "allocationID",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidProof",
    inputs: [],
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610606806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80630f60f6991461003b5780633d15da4a14610050575b600080fd5b61004e6100493660046104f9565b61009e565b005b61008a61005e366004610587565b6001600160a01b0391821660009081526020818152604080832093909416825291909152205460ff1690565b604051901515815260200160405180910390f35b6001600160a01b038085166000908152602081815260408083209387168352929052205460ff1615156001036100ff57604051634f5f0b4f60e01b81526001600160a01b038086166004830152841660248201526044015b60405180910390fd5b61010b82828686610168565b6001600160a01b0380851660008181526020818152604080832094881680845294909152808220805460ff19166001179055517f8f8cb7299dafcecda52ffc66759cd8a45729a74a70c0a361d7fb220cca757e699190a350505050565b60408051466020808301919091526bffffffffffffffffffffffff19606086811b82168486015285811b8216605485015233901b1660688301528251808303605c018152607c90920190925280519101207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c829052603c81209050826001600160a01b03166102348288888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061026392505050565b6001600160a01b03161461025b576040516309bde33960e01b815260040160405180910390fd5b505050505050565b60008060006102728585610287565b9150915061027f816102cc565b509392505050565b60008082516041036102bd5760208301516040840151606085015160001a6102b187828585610419565b945094505050506102c5565b506000905060025b9250929050565b60008160048111156102e0576102e06105ba565b036102e85750565b60018160048111156102fc576102fc6105ba565b036103495760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016100f6565b600281600481111561035d5761035d6105ba565b036103aa5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016100f6565b60038160048111156103be576103be6105ba565b036104165760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016100f6565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561045057506000905060036104d4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156104a4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166104cd576000600192509250506104d4565b9150600090505b94509492505050565b80356001600160a01b03811681146104f457600080fd5b919050565b6000806000806060858703121561050f57600080fd5b610518856104dd565b9350610526602086016104dd565b9250604085013567ffffffffffffffff8082111561054357600080fd5b818701915087601f83011261055757600080fd5b81358181111561056657600080fd5b88602082850101111561057857600080fd5b95989497505060200194505050565b6000806040838503121561059a57600080fd5b6105a3836104dd565b91506105b1602084016104dd565b90509250929050565b634e487b7160e01b600052602160045260246000fdfea264697066735822122051e11f8c085722994acb10e2d88ea7df4f372686d3e6f86e3eca1477e0bd854d64736f6c63430008120033";
