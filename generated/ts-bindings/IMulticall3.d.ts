/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface IMulticall3Interface extends Interface {
  functions: {
    aggregate: TypedFunctionDescription<{
      encode([calls]: [{ target: string; callData: Arrayish }[]]): string;
    }>;

    aggregate3: TypedFunctionDescription<{
      encode([calls]: [
        { target: string; allowFailure: boolean; callData: Arrayish }[]
      ]): string;
    }>;

    aggregate3Value: TypedFunctionDescription<{
      encode([calls]: [
        {
          target: string;
          allowFailure: boolean;
          value: BigNumberish;
          callData: Arrayish;
        }[]
      ]): string;
    }>;

    blockAndAggregate: TypedFunctionDescription<{
      encode([calls]: [{ target: string; callData: Arrayish }[]]): string;
    }>;

    getBasefee: TypedFunctionDescription<{ encode([]: []): string }>;

    getBlockHash: TypedFunctionDescription<{
      encode([blockNumber]: [BigNumberish]): string;
    }>;

    getBlockNumber: TypedFunctionDescription<{ encode([]: []): string }>;

    getChainId: TypedFunctionDescription<{ encode([]: []): string }>;

    getCurrentBlockCoinbase: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getCurrentBlockDifficulty: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getCurrentBlockGasLimit: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getCurrentBlockTimestamp: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getEthBalance: TypedFunctionDescription<{
      encode([addr]: [string]): string;
    }>;

    getLastBlockHash: TypedFunctionDescription<{ encode([]: []): string }>;

    tryAggregate: TypedFunctionDescription<{
      encode([requireSuccess, calls]: [
        boolean,
        { target: string; callData: Arrayish }[]
      ]): string;
    }>;

    tryBlockAndAggregate: TypedFunctionDescription<{
      encode([requireSuccess, calls]: [
        boolean,
        { target: string; callData: Arrayish }[]
      ]): string;
    }>;
  };

  events: {};
}

export class IMulticall3 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IMulticall3;
  attach(addressOrName: string): IMulticall3;
  deployed(): Promise<IMulticall3>;

  on(event: EventFilter | string, listener: Listener): IMulticall3;
  once(event: EventFilter | string, listener: Listener): IMulticall3;
  addListener(eventName: EventFilter | string, listener: Listener): IMulticall3;
  removeAllListeners(eventName: EventFilter | string): IMulticall3;
  removeListener(eventName: any, listener: Listener): IMulticall3;

  interface: IMulticall3Interface;

  functions: {
    aggregate(
      calls: { target: string; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "aggregate((address,bytes)[])"(
      calls: { target: string; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    aggregate3(
      calls: { target: string; allowFailure: boolean; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "aggregate3((address,bool,bytes)[])"(
      calls: { target: string; allowFailure: boolean; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    aggregate3Value(
      calls: {
        target: string;
        allowFailure: boolean;
        value: BigNumberish;
        callData: Arrayish;
      }[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "aggregate3Value((address,bool,uint256,bytes)[])"(
      calls: {
        target: string;
        allowFailure: boolean;
        value: BigNumberish;
        callData: Arrayish;
      }[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    blockAndAggregate(
      calls: { target: string; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "blockAndAggregate((address,bytes)[])"(
      calls: { target: string; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getBasefee(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getBasefee()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getBlockHash(
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "getBlockHash(uint256)"(
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    getBlockNumber(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getBlockNumber()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getChainId(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getChainId()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getCurrentBlockCoinbase(overrides?: UnsignedTransaction): Promise<string>;

    "getCurrentBlockCoinbase()"(
      overrides?: UnsignedTransaction
    ): Promise<string>;

    getCurrentBlockDifficulty(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getCurrentBlockDifficulty()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getCurrentBlockGasLimit(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getCurrentBlockGasLimit()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getCurrentBlockTimestamp(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getCurrentBlockTimestamp()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getEthBalance(
      addr: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getEthBalance(address)"(
      addr: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getLastBlockHash(overrides?: UnsignedTransaction): Promise<string>;

    "getLastBlockHash()"(overrides?: UnsignedTransaction): Promise<string>;

    tryAggregate(
      requireSuccess: boolean,
      calls: { target: string; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "tryAggregate(bool,(address,bytes)[])"(
      requireSuccess: boolean,
      calls: { target: string; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    tryBlockAndAggregate(
      requireSuccess: boolean,
      calls: { target: string; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "tryBlockAndAggregate(bool,(address,bytes)[])"(
      requireSuccess: boolean,
      calls: { target: string; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;
  };

  aggregate(
    calls: { target: string; callData: Arrayish }[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "aggregate((address,bytes)[])"(
    calls: { target: string; callData: Arrayish }[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  aggregate3(
    calls: { target: string; allowFailure: boolean; callData: Arrayish }[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "aggregate3((address,bool,bytes)[])"(
    calls: { target: string; allowFailure: boolean; callData: Arrayish }[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  aggregate3Value(
    calls: {
      target: string;
      allowFailure: boolean;
      value: BigNumberish;
      callData: Arrayish;
    }[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "aggregate3Value((address,bool,uint256,bytes)[])"(
    calls: {
      target: string;
      allowFailure: boolean;
      value: BigNumberish;
      callData: Arrayish;
    }[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  blockAndAggregate(
    calls: { target: string; callData: Arrayish }[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "blockAndAggregate((address,bytes)[])"(
    calls: { target: string; callData: Arrayish }[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getBasefee(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getBasefee()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  getBlockHash(
    blockNumber: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "getBlockHash(uint256)"(
    blockNumber: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  getBlockNumber(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getBlockNumber()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  getChainId(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getChainId()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  getCurrentBlockCoinbase(overrides?: UnsignedTransaction): Promise<string>;

  "getCurrentBlockCoinbase()"(overrides?: UnsignedTransaction): Promise<string>;

  getCurrentBlockDifficulty(
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getCurrentBlockDifficulty()"(
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  getCurrentBlockGasLimit(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getCurrentBlockGasLimit()"(
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  getCurrentBlockTimestamp(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getCurrentBlockTimestamp()"(
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  getEthBalance(
    addr: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getEthBalance(address)"(
    addr: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  getLastBlockHash(overrides?: UnsignedTransaction): Promise<string>;

  "getLastBlockHash()"(overrides?: UnsignedTransaction): Promise<string>;

  tryAggregate(
    requireSuccess: boolean,
    calls: { target: string; callData: Arrayish }[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "tryAggregate(bool,(address,bytes)[])"(
    requireSuccess: boolean,
    calls: { target: string; callData: Arrayish }[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  tryBlockAndAggregate(
    requireSuccess: boolean,
    calls: { target: string; callData: Arrayish }[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "tryBlockAndAggregate(bool,(address,bytes)[])"(
    requireSuccess: boolean,
    calls: { target: string; callData: Arrayish }[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    aggregate(
      calls: { target: string; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "aggregate((address,bytes)[])"(
      calls: { target: string; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    aggregate3(
      calls: { target: string; allowFailure: boolean; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "aggregate3((address,bool,bytes)[])"(
      calls: { target: string; allowFailure: boolean; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    aggregate3Value(
      calls: {
        target: string;
        allowFailure: boolean;
        value: BigNumberish;
        callData: Arrayish;
      }[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "aggregate3Value((address,bool,uint256,bytes)[])"(
      calls: {
        target: string;
        allowFailure: boolean;
        value: BigNumberish;
        callData: Arrayish;
      }[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    blockAndAggregate(
      calls: { target: string; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "blockAndAggregate((address,bytes)[])"(
      calls: { target: string; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getBasefee(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getBasefee()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getBlockHash(
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getBlockHash(uint256)"(
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getBlockNumber(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getBlockNumber()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getChainId(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getChainId()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getCurrentBlockCoinbase(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getCurrentBlockCoinbase()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getCurrentBlockDifficulty(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getCurrentBlockDifficulty()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getCurrentBlockGasLimit(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getCurrentBlockGasLimit()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getCurrentBlockTimestamp(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getCurrentBlockTimestamp()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getEthBalance(
      addr: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getEthBalance(address)"(
      addr: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getLastBlockHash(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getLastBlockHash()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    tryAggregate(
      requireSuccess: boolean,
      calls: { target: string; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "tryAggregate(bool,(address,bytes)[])"(
      requireSuccess: boolean,
      calls: { target: string; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    tryBlockAndAggregate(
      requireSuccess: boolean,
      calls: { target: string; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "tryBlockAndAggregate(bool,(address,bytes)[])"(
      requireSuccess: boolean,
      calls: { target: string; callData: Arrayish }[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
