/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface VmInterface extends Interface {
  functions: {
    accesses: TypedFunctionDescription<{ encode([target]: [string]): string }>;

    activeFork: TypedFunctionDescription<{ encode([]: []): string }>;

    addr: TypedFunctionDescription<{
      encode([privateKey]: [BigNumberish]): string;
    }>;

    allowCheatcodes: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    assume: TypedFunctionDescription<{
      encode([condition]: [boolean]): string;
    }>;

    breakpoint: TypedFunctionDescription<{ encode([char]: [string]): string }>;

    broadcast: TypedFunctionDescription<{ encode([]: []): string }>;

    chainId: TypedFunctionDescription<{
      encode([newChainId]: [BigNumberish]): string;
    }>;

    clearMockedCalls: TypedFunctionDescription<{ encode([]: []): string }>;

    closeFile: TypedFunctionDescription<{ encode([path]: [string]): string }>;

    coinbase: TypedFunctionDescription<{
      encode([newCoinbase]: [string]): string;
    }>;

    createDir: TypedFunctionDescription<{
      encode([path, recursive]: [string, boolean]): string;
    }>;

    createFork: TypedFunctionDescription<{
      encode([urlOrAlias]: [string]): string;
    }>;

    createSelectFork: TypedFunctionDescription<{
      encode([urlOrAlias, blockNumber]: [string, BigNumberish]): string;
    }>;

    deal: TypedFunctionDescription<{
      encode([account, newBalance]: [string, BigNumberish]): string;
    }>;

    deriveKey: TypedFunctionDescription<{
      encode([mnemonic, index]: [string, BigNumberish]): string;
    }>;

    difficulty: TypedFunctionDescription<{
      encode([newDifficulty]: [BigNumberish]): string;
    }>;

    envAddress: TypedFunctionDescription<{ encode([name]: [string]): string }>;

    envBool: TypedFunctionDescription<{ encode([name]: [string]): string }>;

    envBytes: TypedFunctionDescription<{ encode([name]: [string]): string }>;

    envBytes32: TypedFunctionDescription<{
      encode([name, delim]: [string, string]): string;
    }>;

    envInt: TypedFunctionDescription<{
      encode([name, delim]: [string, string]): string;
    }>;

    envOr: TypedFunctionDescription<{
      encode([name, delim, defaultValue]: [string, string, Arrayish[]]): string;
    }>;

    envString: TypedFunctionDescription<{
      encode([name, delim]: [string, string]): string;
    }>;

    envUint: TypedFunctionDescription<{ encode([name]: [string]): string }>;

    etch: TypedFunctionDescription<{
      encode([target, newRuntimeBytecode]: [string, Arrayish]): string;
    }>;

    expectCall: TypedFunctionDescription<{
      encode([callee, msgValue, gas, data]: [
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    expectCallMinGas: TypedFunctionDescription<{
      encode([callee, msgValue, minGas, data]: [
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    expectEmit: TypedFunctionDescription<{ encode([]: []): string }>;

    expectRevert: TypedFunctionDescription<{
      encode([revertData]: [Arrayish]): string;
    }>;

    expectSafeMemory: TypedFunctionDescription<{
      encode([min, max]: [BigNumberish, BigNumberish]): string;
    }>;

    expectSafeMemoryCall: TypedFunctionDescription<{
      encode([min, max]: [BigNumberish, BigNumberish]): string;
    }>;

    fee: TypedFunctionDescription<{
      encode([newBasefee]: [BigNumberish]): string;
    }>;

    ffi: TypedFunctionDescription<{
      encode([commandInput]: [string[]]): string;
    }>;

    fsMetadata: TypedFunctionDescription<{ encode([path]: [string]): string }>;

    getCode: TypedFunctionDescription<{
      encode([artifactPath]: [string]): string;
    }>;

    getDeployedCode: TypedFunctionDescription<{
      encode([artifactPath]: [string]): string;
    }>;

    getNonce: TypedFunctionDescription<{ encode([account]: [string]): string }>;

    getRecordedLogs: TypedFunctionDescription<{ encode([]: []): string }>;

    isPersistent: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    label: TypedFunctionDescription<{
      encode([account, newLabel]: [string, string]): string;
    }>;

    load: TypedFunctionDescription<{
      encode([target, slot]: [string, Arrayish]): string;
    }>;

    makePersistent: TypedFunctionDescription<{
      encode([accounts]: [string[]]): string;
    }>;

    mockCall: TypedFunctionDescription<{
      encode([callee, msgValue, data, returnData]: [
        string,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    mockCallRevert: TypedFunctionDescription<{
      encode([callee, msgValue, data, revertData]: [
        string,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    parseAddress: TypedFunctionDescription<{
      encode([stringifiedValue]: [string]): string;
    }>;

    parseBool: TypedFunctionDescription<{
      encode([stringifiedValue]: [string]): string;
    }>;

    parseBytes: TypedFunctionDescription<{
      encode([stringifiedValue]: [string]): string;
    }>;

    parseBytes32: TypedFunctionDescription<{
      encode([stringifiedValue]: [string]): string;
    }>;

    parseInt: TypedFunctionDescription<{
      encode([stringifiedValue]: [string]): string;
    }>;

    parseJson: TypedFunctionDescription<{ encode([json]: [string]): string }>;

    parseJsonAddress: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    parseJsonAddressArray: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    parseJsonBool: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    parseJsonBoolArray: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    parseJsonBytes: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    parseJsonBytes32: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    parseJsonBytes32Array: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    parseJsonBytesArray: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    parseJsonInt: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    parseJsonIntArray: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    parseJsonString: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    parseJsonStringArray: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    parseJsonUint: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    parseJsonUintArray: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    parseUint: TypedFunctionDescription<{
      encode([stringifiedValue]: [string]): string;
    }>;

    pauseGasMetering: TypedFunctionDescription<{ encode([]: []): string }>;

    prank: TypedFunctionDescription<{
      encode([msgSender, txOrigin]: [string, string]): string;
    }>;

    projectRoot: TypedFunctionDescription<{ encode([]: []): string }>;

    readDir: TypedFunctionDescription<{
      encode([path, maxDepth]: [string, BigNumberish]): string;
    }>;

    readFile: TypedFunctionDescription<{ encode([path]: [string]): string }>;

    readFileBinary: TypedFunctionDescription<{
      encode([path]: [string]): string;
    }>;

    readLine: TypedFunctionDescription<{ encode([path]: [string]): string }>;

    readLink: TypedFunctionDescription<{
      encode([linkPath]: [string]): string;
    }>;

    record: TypedFunctionDescription<{ encode([]: []): string }>;

    recordLogs: TypedFunctionDescription<{ encode([]: []): string }>;

    rememberKey: TypedFunctionDescription<{
      encode([privateKey]: [BigNumberish]): string;
    }>;

    removeDir: TypedFunctionDescription<{
      encode([path, recursive]: [string, boolean]): string;
    }>;

    removeFile: TypedFunctionDescription<{ encode([path]: [string]): string }>;

    resumeGasMetering: TypedFunctionDescription<{ encode([]: []): string }>;

    revertTo: TypedFunctionDescription<{
      encode([snapshotId]: [BigNumberish]): string;
    }>;

    revokePersistent: TypedFunctionDescription<{
      encode([accounts]: [string[]]): string;
    }>;

    roll: TypedFunctionDescription<{
      encode([newHeight]: [BigNumberish]): string;
    }>;

    rollFork: TypedFunctionDescription<{
      encode([txHash]: [Arrayish]): string;
    }>;

    rpcUrl: TypedFunctionDescription<{ encode([rpcAlias]: [string]): string }>;

    rpcUrlStructs: TypedFunctionDescription<{ encode([]: []): string }>;

    rpcUrls: TypedFunctionDescription<{ encode([]: []): string }>;

    selectFork: TypedFunctionDescription<{
      encode([forkId]: [BigNumberish]): string;
    }>;

    serializeAddress: TypedFunctionDescription<{
      encode([objectKey, valueKey, values]: [string, string, string[]]): string;
    }>;

    serializeBool: TypedFunctionDescription<{
      encode([objectKey, valueKey, values]: [
        string,
        string,
        boolean[]
      ]): string;
    }>;

    serializeBytes: TypedFunctionDescription<{
      encode([objectKey, valueKey, values]: [
        string,
        string,
        Arrayish[]
      ]): string;
    }>;

    serializeBytes32: TypedFunctionDescription<{
      encode([objectKey, valueKey, values]: [
        string,
        string,
        Arrayish[]
      ]): string;
    }>;

    serializeInt: TypedFunctionDescription<{
      encode([objectKey, valueKey, value]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    serializeString: TypedFunctionDescription<{
      encode([objectKey, valueKey, values]: [string, string, string[]]): string;
    }>;

    serializeUint: TypedFunctionDescription<{
      encode([objectKey, valueKey, value]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    setEnv: TypedFunctionDescription<{
      encode([name, value]: [string, string]): string;
    }>;

    setNonce: TypedFunctionDescription<{
      encode([account, newNonce]: [string, BigNumberish]): string;
    }>;

    sign: TypedFunctionDescription<{
      encode([privateKey, digest]: [BigNumberish, Arrayish]): string;
    }>;

    snapshot: TypedFunctionDescription<{ encode([]: []): string }>;

    startBroadcast: TypedFunctionDescription<{ encode([]: []): string }>;

    startPrank: TypedFunctionDescription<{
      encode([msgSender]: [string]): string;
    }>;

    stopBroadcast: TypedFunctionDescription<{ encode([]: []): string }>;

    stopPrank: TypedFunctionDescription<{ encode([]: []): string }>;

    store: TypedFunctionDescription<{
      encode([target, slot, value]: [string, Arrayish, Arrayish]): string;
    }>;

    toString: TypedFunctionDescription<{ encode([value]: [string]): string }>;

    transact: TypedFunctionDescription<{
      encode([forkId, txHash]: [BigNumberish, Arrayish]): string;
    }>;

    txGasPrice: TypedFunctionDescription<{
      encode([newGasPrice]: [BigNumberish]): string;
    }>;

    warp: TypedFunctionDescription<{
      encode([newTimestamp]: [BigNumberish]): string;
    }>;

    writeFile: TypedFunctionDescription<{
      encode([path, data]: [string, string]): string;
    }>;

    writeFileBinary: TypedFunctionDescription<{
      encode([path, data]: [string, Arrayish]): string;
    }>;

    writeJson: TypedFunctionDescription<{
      encode([json, path, valueKey]: [string, string, string]): string;
    }>;

    writeLine: TypedFunctionDescription<{
      encode([path, data]: [string, string]): string;
    }>;
  };

  events: {};
}

export class Vm extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Vm;
  attach(addressOrName: string): Vm;
  deployed(): Promise<Vm>;

  on(event: EventFilter | string, listener: Listener): Vm;
  once(event: EventFilter | string, listener: Listener): Vm;
  addListener(eventName: EventFilter | string, listener: Listener): Vm;
  removeAllListeners(eventName: EventFilter | string): Vm;
  removeListener(eventName: any, listener: Listener): Vm;

  interface: VmInterface;

  functions: {
    accesses(
      target: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "accesses(address)"(
      target: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    activeFork(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "activeFork()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    addr(
      privateKey: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "addr(uint256)"(
      privateKey: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    allowCheatcodes(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "allowCheatcodes(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    assume(condition: boolean, overrides?: UnsignedTransaction): Promise<void>;

    "assume(bool)"(
      condition: boolean,
      overrides?: UnsignedTransaction
    ): Promise<void>;

    breakpoint(
      char: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "breakpoint(string)"(
      char: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "breakpoint(string,bool)"(
      char: string,
      value: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    broadcast(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "broadcast()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "broadcast(address)"(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "broadcast(uint256)"(
      privateKey: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    chainId(
      newChainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "chainId(uint256)"(
      newChainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    clearMockedCalls(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "clearMockedCalls()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    closeFile(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "closeFile(string)"(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    coinbase(
      newCoinbase: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "coinbase(address)"(
      newCoinbase: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    createDir(
      path: string,
      recursive: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "createDir(string,bool)"(
      path: string,
      recursive: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    createFork(
      urlOrAlias: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "createFork(string)"(
      urlOrAlias: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "createFork(string,uint256)"(
      urlOrAlias: string,
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "createFork(string,bytes32)"(
      urlOrAlias: string,
      txHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    createSelectFork(
      urlOrAlias: string,
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "createSelectFork(string,uint256)"(
      urlOrAlias: string,
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "createSelectFork(string,bytes32)"(
      urlOrAlias: string,
      txHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "createSelectFork(string)"(
      urlOrAlias: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    deal(
      account: string,
      newBalance: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "deal(address,uint256)"(
      account: string,
      newBalance: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    deriveKey(
      mnemonic: string,
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "deriveKey(string,uint32)"(
      mnemonic: string,
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "deriveKey(string,string,uint32)"(
      mnemonic: string,
      derivationPath: string,
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    difficulty(
      newDifficulty: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "difficulty(uint256)"(
      newDifficulty: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    envAddress(name: string, overrides?: UnsignedTransaction): Promise<string>;

    "envAddress(string)"(
      name: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "envAddress(string,string)"(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<string[]>;

    envBool(name: string, overrides?: UnsignedTransaction): Promise<boolean>;

    "envBool(string)"(
      name: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "envBool(string,string)"(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean[]>;

    envBytes(name: string, overrides?: UnsignedTransaction): Promise<string>;

    "envBytes(string)"(
      name: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "envBytes(string,string)"(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<string[]>;

    envBytes32(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<string[]>;

    "envBytes32(string,string)"(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<string[]>;

    "envBytes32(string)"(
      name: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    envInt(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber[]>;

    "envInt(string,string)"(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber[]>;

    "envInt(string)"(
      name: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    envOr(
      name: string,
      delim: string,
      defaultValue: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "envOr(string,string,bytes32[])"(
      name: string,
      delim: string,
      defaultValue: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "envOr(string,string,int256[])"(
      name: string,
      delim: string,
      defaultValue: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "envOr(string,bool)"(
      name: string,
      defaultValue: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "envOr(string,address)"(
      name: string,
      defaultValue: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "envOr(string,uint256)"(
      name: string,
      defaultValue: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "envOr(string,string,bytes[])"(
      name: string,
      delim: string,
      defaultValue: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "envOr(string,string,uint256[])"(
      name: string,
      delim: string,
      defaultValue: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "envOr(string,string,string[])"(
      name: string,
      delim: string,
      defaultValue: string[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "envOr(string,bytes)"(
      name: string,
      defaultValue: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "envOr(string,bytes32)"(
      name: string,
      defaultValue: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "envOr(string,int256)"(
      name: string,
      defaultValue: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "envOr(string,string,address[])"(
      name: string,
      delim: string,
      defaultValue: string[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "envOr(string,string)"(
      name: string,
      defaultValue: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "envOr(string,string,bool[])"(
      name: string,
      delim: string,
      defaultValue: boolean[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    envString(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<string[]>;

    "envString(string,string)"(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<string[]>;

    "envString(string)"(
      name: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    envUint(name: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "envUint(string)"(
      name: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envUint(string,string)"(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber[]>;

    etch(
      target: string,
      newRuntimeBytecode: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "etch(address,bytes)"(
      target: string,
      newRuntimeBytecode: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    expectCall(
      callee: string,
      msgValue: BigNumberish,
      gas: BigNumberish,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "expectCall(address,uint256,uint64,bytes)"(
      callee: string,
      msgValue: BigNumberish,
      gas: BigNumberish,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "expectCall(address,uint256,uint64,bytes,uint64)"(
      callee: string,
      msgValue: BigNumberish,
      gas: BigNumberish,
      data: Arrayish,
      count: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "expectCall(address,uint256,bytes,uint64)"(
      callee: string,
      msgValue: BigNumberish,
      data: Arrayish,
      count: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "expectCall(address,bytes)"(
      callee: string,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "expectCall(address,bytes,uint64)"(
      callee: string,
      data: Arrayish,
      count: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "expectCall(address,uint256,bytes)"(
      callee: string,
      msgValue: BigNumberish,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    expectCallMinGas(
      callee: string,
      msgValue: BigNumberish,
      minGas: BigNumberish,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "expectCallMinGas(address,uint256,uint64,bytes)"(
      callee: string,
      msgValue: BigNumberish,
      minGas: BigNumberish,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "expectCallMinGas(address,uint256,uint64,bytes,uint64)"(
      callee: string,
      msgValue: BigNumberish,
      minGas: BigNumberish,
      data: Arrayish,
      count: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    expectEmit(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "expectEmit()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "expectEmit(bool,bool,bool,bool)"(
      checkTopic1: boolean,
      checkTopic2: boolean,
      checkTopic3: boolean,
      checkData: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "expectEmit(bool,bool,bool,bool,address)"(
      checkTopic1: boolean,
      checkTopic2: boolean,
      checkTopic3: boolean,
      checkData: boolean,
      emitter: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "expectEmit(address)"(
      emitter: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    expectRevert(
      revertData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "expectRevert(bytes4)"(
      revertData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "expectRevert(bytes)"(
      revertData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "expectRevert()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    expectSafeMemory(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "expectSafeMemory(uint64,uint64)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    expectSafeMemoryCall(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "expectSafeMemoryCall(uint64,uint64)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    fee(
      newBasefee: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "fee(uint256)"(
      newBasefee: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    ffi(
      commandInput: string[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "ffi(string[])"(
      commandInput: string[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    fsMetadata(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isDir: boolean;
        isSymlink: boolean;
        length: BigNumber;
        readOnly: boolean;
        modified: BigNumber;
        accessed: BigNumber;
        created: BigNumber;
      }
    >;

    "fsMetadata(string)"(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isDir: boolean;
        isSymlink: boolean;
        length: BigNumber;
        readOnly: boolean;
        modified: BigNumber;
        accessed: BigNumber;
        created: BigNumber;
      }
    >;

    getCode(
      artifactPath: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "getCode(string)"(
      artifactPath: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    getDeployedCode(
      artifactPath: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "getDeployedCode(string)"(
      artifactPath: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    getNonce(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getNonce(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getRecordedLogs(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "getRecordedLogs()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    isPersistent(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "isPersistent(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    label(
      account: string,
      newLabel: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "label(address,string)"(
      account: string,
      newLabel: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    load(
      target: string,
      slot: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "load(address,bytes32)"(
      target: string,
      slot: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    makePersistent(
      accounts: string[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "makePersistent(address[])"(
      accounts: string[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "makePersistent(address,address)"(
      account0: string,
      account1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "makePersistent(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "makePersistent(address,address,address)"(
      account0: string,
      account1: string,
      account2: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    mockCall(
      callee: string,
      msgValue: BigNumberish,
      data: Arrayish,
      returnData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "mockCall(address,uint256,bytes,bytes)"(
      callee: string,
      msgValue: BigNumberish,
      data: Arrayish,
      returnData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "mockCall(address,bytes,bytes)"(
      callee: string,
      data: Arrayish,
      returnData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    mockCallRevert(
      callee: string,
      msgValue: BigNumberish,
      data: Arrayish,
      revertData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "mockCallRevert(address,uint256,bytes,bytes)"(
      callee: string,
      msgValue: BigNumberish,
      data: Arrayish,
      revertData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "mockCallRevert(address,bytes,bytes)"(
      callee: string,
      data: Arrayish,
      revertData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    parseAddress(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "parseAddress(string)"(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    parseBool(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "parseBool(string)"(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    parseBytes(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "parseBytes(string)"(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    parseBytes32(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "parseBytes32(string)"(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    parseInt(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseInt(string)"(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseJson(json: string, overrides?: UnsignedTransaction): Promise<string>;

    "parseJson(string)"(
      json: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "parseJson(string,string)"(
      json: string,
      key: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    parseJsonAddress(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "parseJsonAddress(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    parseJsonAddressArray(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "parseJsonAddressArray(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    parseJsonBool(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "parseJsonBool(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    parseJsonBoolArray(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "parseJsonBoolArray(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    parseJsonBytes(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "parseJsonBytes(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    parseJsonBytes32(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "parseJsonBytes32(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    parseJsonBytes32Array(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "parseJsonBytes32Array(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    parseJsonBytesArray(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "parseJsonBytesArray(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    parseJsonInt(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "parseJsonInt(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    parseJsonIntArray(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "parseJsonIntArray(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    parseJsonString(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "parseJsonString(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    parseJsonStringArray(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "parseJsonStringArray(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    parseJsonUint(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "parseJsonUint(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    parseJsonUintArray(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "parseJsonUintArray(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    parseUint(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseUint(string)"(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    pauseGasMetering(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "pauseGasMetering()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    prank(
      msgSender: string,
      txOrigin: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "prank(address,address)"(
      msgSender: string,
      txOrigin: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "prank(address)"(
      msgSender: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    projectRoot(overrides?: UnsignedTransaction): Promise<string>;

    "projectRoot()"(overrides?: UnsignedTransaction): Promise<string>;

    readDir(
      path: string,
      maxDepth: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      ([string, string, BigNumber, boolean, boolean] & {
        errorMessage: string;
        path: string;
        depth: BigNumber;
        isDir: boolean;
        isSymlink: boolean;
      })[]
    >;

    "readDir(string,uint64)"(
      path: string,
      maxDepth: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      ([string, string, BigNumber, boolean, boolean] & {
        errorMessage: string;
        path: string;
        depth: BigNumber;
        isDir: boolean;
        isSymlink: boolean;
      })[]
    >;

    "readDir(string,uint64,bool)"(
      path: string,
      maxDepth: BigNumberish,
      followLinks: boolean,
      overrides?: UnsignedTransaction
    ): Promise<
      ([string, string, BigNumber, boolean, boolean] & {
        errorMessage: string;
        path: string;
        depth: BigNumber;
        isDir: boolean;
        isSymlink: boolean;
      })[]
    >;

    "readDir(string)"(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<
      ([string, string, BigNumber, boolean, boolean] & {
        errorMessage: string;
        path: string;
        depth: BigNumber;
        isDir: boolean;
        isSymlink: boolean;
      })[]
    >;

    readFile(path: string, overrides?: UnsignedTransaction): Promise<string>;

    "readFile(string)"(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    readFileBinary(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "readFileBinary(string)"(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    readLine(path: string, overrides?: UnsignedTransaction): Promise<string>;

    "readLine(string)"(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    readLink(
      linkPath: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "readLink(string)"(
      linkPath: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    record(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "record()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    recordLogs(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "recordLogs()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    rememberKey(
      privateKey: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "rememberKey(uint256)"(
      privateKey: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    removeDir(
      path: string,
      recursive: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "removeDir(string,bool)"(
      path: string,
      recursive: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    removeFile(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "removeFile(string)"(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    resumeGasMetering(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "resumeGasMetering()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    revertTo(
      snapshotId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "revertTo(uint256)"(
      snapshotId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    revokePersistent(
      accounts: string[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "revokePersistent(address[])"(
      accounts: string[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "revokePersistent(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    roll(
      newHeight: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "roll(uint256)"(
      newHeight: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    rollFork(
      txHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "rollFork(bytes32)"(
      txHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "rollFork(uint256,uint256)"(
      forkId: BigNumberish,
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "rollFork(uint256)"(
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "rollFork(uint256,bytes32)"(
      forkId: BigNumberish,
      txHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    rpcUrl(rpcAlias: string, overrides?: UnsignedTransaction): Promise<string>;

    "rpcUrl(string)"(
      rpcAlias: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    rpcUrlStructs(
      overrides?: UnsignedTransaction
    ): Promise<([string, string] & { key: string; url: string })[]>;

    "rpcUrlStructs()"(
      overrides?: UnsignedTransaction
    ): Promise<([string, string] & { key: string; url: string })[]>;

    rpcUrls(overrides?: UnsignedTransaction): Promise<string[][]>;

    "rpcUrls()"(overrides?: UnsignedTransaction): Promise<string[][]>;

    selectFork(
      forkId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "selectFork(uint256)"(
      forkId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    serializeAddress(
      objectKey: string,
      valueKey: string,
      values: string[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "serializeAddress(string,string,address[])"(
      objectKey: string,
      valueKey: string,
      values: string[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "serializeAddress(string,string,address)"(
      objectKey: string,
      valueKey: string,
      value: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    serializeBool(
      objectKey: string,
      valueKey: string,
      values: boolean[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "serializeBool(string,string,bool[])"(
      objectKey: string,
      valueKey: string,
      values: boolean[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "serializeBool(string,string,bool)"(
      objectKey: string,
      valueKey: string,
      value: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    serializeBytes(
      objectKey: string,
      valueKey: string,
      values: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "serializeBytes(string,string,bytes[])"(
      objectKey: string,
      valueKey: string,
      values: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "serializeBytes(string,string,bytes)"(
      objectKey: string,
      valueKey: string,
      value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    serializeBytes32(
      objectKey: string,
      valueKey: string,
      values: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "serializeBytes32(string,string,bytes32[])"(
      objectKey: string,
      valueKey: string,
      values: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "serializeBytes32(string,string,bytes32)"(
      objectKey: string,
      valueKey: string,
      value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    serializeInt(
      objectKey: string,
      valueKey: string,
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "serializeInt(string,string,int256)"(
      objectKey: string,
      valueKey: string,
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "serializeInt(string,string,int256[])"(
      objectKey: string,
      valueKey: string,
      values: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    serializeString(
      objectKey: string,
      valueKey: string,
      values: string[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "serializeString(string,string,string[])"(
      objectKey: string,
      valueKey: string,
      values: string[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "serializeString(string,string,string)"(
      objectKey: string,
      valueKey: string,
      value: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    serializeUint(
      objectKey: string,
      valueKey: string,
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "serializeUint(string,string,uint256)"(
      objectKey: string,
      valueKey: string,
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "serializeUint(string,string,uint256[])"(
      objectKey: string,
      valueKey: string,
      values: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setEnv(
      name: string,
      value: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setEnv(string,string)"(
      name: string,
      value: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setNonce(
      account: string,
      newNonce: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setNonce(address,uint64)"(
      account: string,
      newNonce: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    sign(
      privateKey: BigNumberish,
      digest: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<[number, string, string] & { v: number; r: string; s: string }>;

    "sign(uint256,bytes32)"(
      privateKey: BigNumberish,
      digest: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<[number, string, string] & { v: number; r: string; s: string }>;

    snapshot(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "snapshot()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    startBroadcast(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "startBroadcast()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "startBroadcast(address)"(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "startBroadcast(uint256)"(
      privateKey: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    startPrank(
      msgSender: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "startPrank(address)"(
      msgSender: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "startPrank(address,address)"(
      msgSender: string,
      txOrigin: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    stopBroadcast(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "stopBroadcast()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    stopPrank(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "stopPrank()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    store(
      target: string,
      slot: Arrayish,
      value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "store(address,bytes32,bytes32)"(
      target: string,
      slot: Arrayish,
      value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    toString(value: string, overrides?: UnsignedTransaction): Promise<string>;

    "toString(address)"(
      value: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "toString(uint256)"(
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "toString(bytes)"(
      value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "toString(bool)"(
      value: boolean,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "toString(int256)"(
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "toString(bytes32)"(
      value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    transact(
      forkId: BigNumberish,
      txHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transact(uint256,bytes32)"(
      forkId: BigNumberish,
      txHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transact(bytes32)"(
      txHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    txGasPrice(
      newGasPrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "txGasPrice(uint256)"(
      newGasPrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    warp(
      newTimestamp: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "warp(uint256)"(
      newTimestamp: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    writeFile(
      path: string,
      data: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "writeFile(string,string)"(
      path: string,
      data: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    writeFileBinary(
      path: string,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "writeFileBinary(string,bytes)"(
      path: string,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    writeJson(
      json: string,
      path: string,
      valueKey: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "writeJson(string,string,string)"(
      json: string,
      path: string,
      valueKey: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "writeJson(string,string)"(
      json: string,
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    writeLine(
      path: string,
      data: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "writeLine(string,string)"(
      path: string,
      data: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;
  };

  accesses(
    target: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "accesses(address)"(
    target: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  activeFork(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "activeFork()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  addr(
    privateKey: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "addr(uint256)"(
    privateKey: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  allowCheatcodes(
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "allowCheatcodes(address)"(
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  assume(condition: boolean, overrides?: UnsignedTransaction): Promise<void>;

  "assume(bool)"(
    condition: boolean,
    overrides?: UnsignedTransaction
  ): Promise<void>;

  breakpoint(
    char: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "breakpoint(string)"(
    char: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "breakpoint(string,bool)"(
    char: string,
    value: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  broadcast(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "broadcast()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "broadcast(address)"(
    signer: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "broadcast(uint256)"(
    privateKey: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  chainId(
    newChainId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "chainId(uint256)"(
    newChainId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  clearMockedCalls(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "clearMockedCalls()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  closeFile(
    path: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "closeFile(string)"(
    path: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  coinbase(
    newCoinbase: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "coinbase(address)"(
    newCoinbase: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  createDir(
    path: string,
    recursive: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "createDir(string,bool)"(
    path: string,
    recursive: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  createFork(
    urlOrAlias: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "createFork(string)"(
    urlOrAlias: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "createFork(string,uint256)"(
    urlOrAlias: string,
    blockNumber: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "createFork(string,bytes32)"(
    urlOrAlias: string,
    txHash: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  createSelectFork(
    urlOrAlias: string,
    blockNumber: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "createSelectFork(string,uint256)"(
    urlOrAlias: string,
    blockNumber: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "createSelectFork(string,bytes32)"(
    urlOrAlias: string,
    txHash: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "createSelectFork(string)"(
    urlOrAlias: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  deal(
    account: string,
    newBalance: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "deal(address,uint256)"(
    account: string,
    newBalance: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  deriveKey(
    mnemonic: string,
    index: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "deriveKey(string,uint32)"(
    mnemonic: string,
    index: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "deriveKey(string,string,uint32)"(
    mnemonic: string,
    derivationPath: string,
    index: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  difficulty(
    newDifficulty: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "difficulty(uint256)"(
    newDifficulty: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  envAddress(name: string, overrides?: UnsignedTransaction): Promise<string>;

  "envAddress(string)"(
    name: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "envAddress(string,string)"(
    name: string,
    delim: string,
    overrides?: UnsignedTransaction
  ): Promise<string[]>;

  envBool(name: string, overrides?: UnsignedTransaction): Promise<boolean>;

  "envBool(string)"(
    name: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "envBool(string,string)"(
    name: string,
    delim: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean[]>;

  envBytes(name: string, overrides?: UnsignedTransaction): Promise<string>;

  "envBytes(string)"(
    name: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "envBytes(string,string)"(
    name: string,
    delim: string,
    overrides?: UnsignedTransaction
  ): Promise<string[]>;

  envBytes32(
    name: string,
    delim: string,
    overrides?: UnsignedTransaction
  ): Promise<string[]>;

  "envBytes32(string,string)"(
    name: string,
    delim: string,
    overrides?: UnsignedTransaction
  ): Promise<string[]>;

  "envBytes32(string)"(
    name: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  envInt(
    name: string,
    delim: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber[]>;

  "envInt(string,string)"(
    name: string,
    delim: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber[]>;

  "envInt(string)"(
    name: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  envOr(
    name: string,
    delim: string,
    defaultValue: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "envOr(string,string,bytes32[])"(
    name: string,
    delim: string,
    defaultValue: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "envOr(string,string,int256[])"(
    name: string,
    delim: string,
    defaultValue: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "envOr(string,bool)"(
    name: string,
    defaultValue: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "envOr(string,address)"(
    name: string,
    defaultValue: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "envOr(string,uint256)"(
    name: string,
    defaultValue: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "envOr(string,string,bytes[])"(
    name: string,
    delim: string,
    defaultValue: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "envOr(string,string,uint256[])"(
    name: string,
    delim: string,
    defaultValue: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "envOr(string,string,string[])"(
    name: string,
    delim: string,
    defaultValue: string[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "envOr(string,bytes)"(
    name: string,
    defaultValue: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "envOr(string,bytes32)"(
    name: string,
    defaultValue: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "envOr(string,int256)"(
    name: string,
    defaultValue: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "envOr(string,string,address[])"(
    name: string,
    delim: string,
    defaultValue: string[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "envOr(string,string)"(
    name: string,
    defaultValue: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "envOr(string,string,bool[])"(
    name: string,
    delim: string,
    defaultValue: boolean[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  envString(
    name: string,
    delim: string,
    overrides?: UnsignedTransaction
  ): Promise<string[]>;

  "envString(string,string)"(
    name: string,
    delim: string,
    overrides?: UnsignedTransaction
  ): Promise<string[]>;

  "envString(string)"(
    name: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  envUint(name: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

  "envUint(string)"(
    name: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "envUint(string,string)"(
    name: string,
    delim: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber[]>;

  etch(
    target: string,
    newRuntimeBytecode: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "etch(address,bytes)"(
    target: string,
    newRuntimeBytecode: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  expectCall(
    callee: string,
    msgValue: BigNumberish,
    gas: BigNumberish,
    data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "expectCall(address,uint256,uint64,bytes)"(
    callee: string,
    msgValue: BigNumberish,
    gas: BigNumberish,
    data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "expectCall(address,uint256,uint64,bytes,uint64)"(
    callee: string,
    msgValue: BigNumberish,
    gas: BigNumberish,
    data: Arrayish,
    count: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "expectCall(address,uint256,bytes,uint64)"(
    callee: string,
    msgValue: BigNumberish,
    data: Arrayish,
    count: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "expectCall(address,bytes)"(
    callee: string,
    data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "expectCall(address,bytes,uint64)"(
    callee: string,
    data: Arrayish,
    count: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "expectCall(address,uint256,bytes)"(
    callee: string,
    msgValue: BigNumberish,
    data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  expectCallMinGas(
    callee: string,
    msgValue: BigNumberish,
    minGas: BigNumberish,
    data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "expectCallMinGas(address,uint256,uint64,bytes)"(
    callee: string,
    msgValue: BigNumberish,
    minGas: BigNumberish,
    data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "expectCallMinGas(address,uint256,uint64,bytes,uint64)"(
    callee: string,
    msgValue: BigNumberish,
    minGas: BigNumberish,
    data: Arrayish,
    count: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  expectEmit(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "expectEmit()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "expectEmit(bool,bool,bool,bool)"(
    checkTopic1: boolean,
    checkTopic2: boolean,
    checkTopic3: boolean,
    checkData: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "expectEmit(bool,bool,bool,bool,address)"(
    checkTopic1: boolean,
    checkTopic2: boolean,
    checkTopic3: boolean,
    checkData: boolean,
    emitter: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "expectEmit(address)"(
    emitter: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  expectRevert(
    revertData: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "expectRevert(bytes4)"(
    revertData: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "expectRevert(bytes)"(
    revertData: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "expectRevert()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  expectSafeMemory(
    min: BigNumberish,
    max: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "expectSafeMemory(uint64,uint64)"(
    min: BigNumberish,
    max: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  expectSafeMemoryCall(
    min: BigNumberish,
    max: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "expectSafeMemoryCall(uint64,uint64)"(
    min: BigNumberish,
    max: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  fee(
    newBasefee: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "fee(uint256)"(
    newBasefee: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  ffi(
    commandInput: string[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "ffi(string[])"(
    commandInput: string[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  fsMetadata(
    path: string,
    overrides?: UnsignedTransaction
  ): Promise<
    [boolean, boolean, BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
      isDir: boolean;
      isSymlink: boolean;
      length: BigNumber;
      readOnly: boolean;
      modified: BigNumber;
      accessed: BigNumber;
      created: BigNumber;
    }
  >;

  "fsMetadata(string)"(
    path: string,
    overrides?: UnsignedTransaction
  ): Promise<
    [boolean, boolean, BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
      isDir: boolean;
      isSymlink: boolean;
      length: BigNumber;
      readOnly: boolean;
      modified: BigNumber;
      accessed: BigNumber;
      created: BigNumber;
    }
  >;

  getCode(
    artifactPath: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "getCode(string)"(
    artifactPath: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  getDeployedCode(
    artifactPath: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "getDeployedCode(string)"(
    artifactPath: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  getNonce(
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getNonce(address)"(
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  getRecordedLogs(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "getRecordedLogs()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  isPersistent(
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "isPersistent(address)"(
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  label(
    account: string,
    newLabel: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "label(address,string)"(
    account: string,
    newLabel: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  load(
    target: string,
    slot: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "load(address,bytes32)"(
    target: string,
    slot: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  makePersistent(
    accounts: string[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "makePersistent(address[])"(
    accounts: string[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "makePersistent(address,address)"(
    account0: string,
    account1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "makePersistent(address)"(
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "makePersistent(address,address,address)"(
    account0: string,
    account1: string,
    account2: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  mockCall(
    callee: string,
    msgValue: BigNumberish,
    data: Arrayish,
    returnData: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "mockCall(address,uint256,bytes,bytes)"(
    callee: string,
    msgValue: BigNumberish,
    data: Arrayish,
    returnData: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "mockCall(address,bytes,bytes)"(
    callee: string,
    data: Arrayish,
    returnData: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  mockCallRevert(
    callee: string,
    msgValue: BigNumberish,
    data: Arrayish,
    revertData: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "mockCallRevert(address,uint256,bytes,bytes)"(
    callee: string,
    msgValue: BigNumberish,
    data: Arrayish,
    revertData: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "mockCallRevert(address,bytes,bytes)"(
    callee: string,
    data: Arrayish,
    revertData: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  parseAddress(
    stringifiedValue: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "parseAddress(string)"(
    stringifiedValue: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  parseBool(
    stringifiedValue: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "parseBool(string)"(
    stringifiedValue: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  parseBytes(
    stringifiedValue: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "parseBytes(string)"(
    stringifiedValue: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  parseBytes32(
    stringifiedValue: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "parseBytes32(string)"(
    stringifiedValue: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  parseInt(
    stringifiedValue: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "parseInt(string)"(
    stringifiedValue: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  parseJson(json: string, overrides?: UnsignedTransaction): Promise<string>;

  "parseJson(string)"(
    json: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "parseJson(string,string)"(
    json: string,
    key: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  parseJsonAddress(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "parseJsonAddress(string,string)"(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  parseJsonAddressArray(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "parseJsonAddressArray(string,string)"(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  parseJsonBool(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "parseJsonBool(string,string)"(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  parseJsonBoolArray(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "parseJsonBoolArray(string,string)"(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  parseJsonBytes(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "parseJsonBytes(string,string)"(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  parseJsonBytes32(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "parseJsonBytes32(string,string)"(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  parseJsonBytes32Array(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "parseJsonBytes32Array(string,string)"(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  parseJsonBytesArray(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "parseJsonBytesArray(string,string)"(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  parseJsonInt(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "parseJsonInt(string,string)"(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  parseJsonIntArray(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "parseJsonIntArray(string,string)"(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  parseJsonString(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "parseJsonString(string,string)"(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  parseJsonStringArray(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "parseJsonStringArray(string,string)"(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  parseJsonUint(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "parseJsonUint(string,string)"(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  parseJsonUintArray(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "parseJsonUintArray(string,string)"(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  parseUint(
    stringifiedValue: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "parseUint(string)"(
    stringifiedValue: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  pauseGasMetering(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "pauseGasMetering()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  prank(
    msgSender: string,
    txOrigin: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "prank(address,address)"(
    msgSender: string,
    txOrigin: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "prank(address)"(
    msgSender: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  projectRoot(overrides?: UnsignedTransaction): Promise<string>;

  "projectRoot()"(overrides?: UnsignedTransaction): Promise<string>;

  readDir(
    path: string,
    maxDepth: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    ([string, string, BigNumber, boolean, boolean] & {
      errorMessage: string;
      path: string;
      depth: BigNumber;
      isDir: boolean;
      isSymlink: boolean;
    })[]
  >;

  "readDir(string,uint64)"(
    path: string,
    maxDepth: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    ([string, string, BigNumber, boolean, boolean] & {
      errorMessage: string;
      path: string;
      depth: BigNumber;
      isDir: boolean;
      isSymlink: boolean;
    })[]
  >;

  "readDir(string,uint64,bool)"(
    path: string,
    maxDepth: BigNumberish,
    followLinks: boolean,
    overrides?: UnsignedTransaction
  ): Promise<
    ([string, string, BigNumber, boolean, boolean] & {
      errorMessage: string;
      path: string;
      depth: BigNumber;
      isDir: boolean;
      isSymlink: boolean;
    })[]
  >;

  "readDir(string)"(
    path: string,
    overrides?: UnsignedTransaction
  ): Promise<
    ([string, string, BigNumber, boolean, boolean] & {
      errorMessage: string;
      path: string;
      depth: BigNumber;
      isDir: boolean;
      isSymlink: boolean;
    })[]
  >;

  readFile(path: string, overrides?: UnsignedTransaction): Promise<string>;

  "readFile(string)"(
    path: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  readFileBinary(
    path: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "readFileBinary(string)"(
    path: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  readLine(path: string, overrides?: UnsignedTransaction): Promise<string>;

  "readLine(string)"(
    path: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  readLink(linkPath: string, overrides?: UnsignedTransaction): Promise<string>;

  "readLink(string)"(
    linkPath: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  record(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "record()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  recordLogs(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "recordLogs()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  rememberKey(
    privateKey: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "rememberKey(uint256)"(
    privateKey: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  removeDir(
    path: string,
    recursive: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "removeDir(string,bool)"(
    path: string,
    recursive: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  removeFile(
    path: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "removeFile(string)"(
    path: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  resumeGasMetering(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "resumeGasMetering()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  revertTo(
    snapshotId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "revertTo(uint256)"(
    snapshotId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  revokePersistent(
    accounts: string[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "revokePersistent(address[])"(
    accounts: string[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "revokePersistent(address)"(
    account: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  roll(
    newHeight: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "roll(uint256)"(
    newHeight: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  rollFork(
    txHash: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "rollFork(bytes32)"(
    txHash: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "rollFork(uint256,uint256)"(
    forkId: BigNumberish,
    blockNumber: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "rollFork(uint256)"(
    blockNumber: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "rollFork(uint256,bytes32)"(
    forkId: BigNumberish,
    txHash: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  rpcUrl(rpcAlias: string, overrides?: UnsignedTransaction): Promise<string>;

  "rpcUrl(string)"(
    rpcAlias: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  rpcUrlStructs(
    overrides?: UnsignedTransaction
  ): Promise<([string, string] & { key: string; url: string })[]>;

  "rpcUrlStructs()"(
    overrides?: UnsignedTransaction
  ): Promise<([string, string] & { key: string; url: string })[]>;

  rpcUrls(overrides?: UnsignedTransaction): Promise<string[][]>;

  "rpcUrls()"(overrides?: UnsignedTransaction): Promise<string[][]>;

  selectFork(
    forkId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "selectFork(uint256)"(
    forkId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  serializeAddress(
    objectKey: string,
    valueKey: string,
    values: string[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "serializeAddress(string,string,address[])"(
    objectKey: string,
    valueKey: string,
    values: string[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "serializeAddress(string,string,address)"(
    objectKey: string,
    valueKey: string,
    value: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  serializeBool(
    objectKey: string,
    valueKey: string,
    values: boolean[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "serializeBool(string,string,bool[])"(
    objectKey: string,
    valueKey: string,
    values: boolean[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "serializeBool(string,string,bool)"(
    objectKey: string,
    valueKey: string,
    value: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  serializeBytes(
    objectKey: string,
    valueKey: string,
    values: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "serializeBytes(string,string,bytes[])"(
    objectKey: string,
    valueKey: string,
    values: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "serializeBytes(string,string,bytes)"(
    objectKey: string,
    valueKey: string,
    value: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  serializeBytes32(
    objectKey: string,
    valueKey: string,
    values: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "serializeBytes32(string,string,bytes32[])"(
    objectKey: string,
    valueKey: string,
    values: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "serializeBytes32(string,string,bytes32)"(
    objectKey: string,
    valueKey: string,
    value: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  serializeInt(
    objectKey: string,
    valueKey: string,
    value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "serializeInt(string,string,int256)"(
    objectKey: string,
    valueKey: string,
    value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "serializeInt(string,string,int256[])"(
    objectKey: string,
    valueKey: string,
    values: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  serializeString(
    objectKey: string,
    valueKey: string,
    values: string[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "serializeString(string,string,string[])"(
    objectKey: string,
    valueKey: string,
    values: string[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "serializeString(string,string,string)"(
    objectKey: string,
    valueKey: string,
    value: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  serializeUint(
    objectKey: string,
    valueKey: string,
    value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "serializeUint(string,string,uint256)"(
    objectKey: string,
    valueKey: string,
    value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "serializeUint(string,string,uint256[])"(
    objectKey: string,
    valueKey: string,
    values: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setEnv(
    name: string,
    value: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setEnv(string,string)"(
    name: string,
    value: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setNonce(
    account: string,
    newNonce: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setNonce(address,uint64)"(
    account: string,
    newNonce: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  sign(
    privateKey: BigNumberish,
    digest: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<[number, string, string] & { v: number; r: string; s: string }>;

  "sign(uint256,bytes32)"(
    privateKey: BigNumberish,
    digest: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<[number, string, string] & { v: number; r: string; s: string }>;

  snapshot(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "snapshot()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  startBroadcast(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "startBroadcast()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "startBroadcast(address)"(
    signer: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "startBroadcast(uint256)"(
    privateKey: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  startPrank(
    msgSender: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "startPrank(address)"(
    msgSender: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "startPrank(address,address)"(
    msgSender: string,
    txOrigin: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  stopBroadcast(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "stopBroadcast()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  stopPrank(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "stopPrank()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  store(
    target: string,
    slot: Arrayish,
    value: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "store(address,bytes32,bytes32)"(
    target: string,
    slot: Arrayish,
    value: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  toString(value: string, overrides?: UnsignedTransaction): Promise<string>;

  "toString(address)"(
    value: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "toString(uint256)"(
    value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "toString(bytes)"(
    value: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "toString(bool)"(
    value: boolean,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "toString(int256)"(
    value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "toString(bytes32)"(
    value: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  transact(
    forkId: BigNumberish,
    txHash: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transact(uint256,bytes32)"(
    forkId: BigNumberish,
    txHash: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transact(bytes32)"(
    txHash: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  txGasPrice(
    newGasPrice: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "txGasPrice(uint256)"(
    newGasPrice: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  warp(
    newTimestamp: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "warp(uint256)"(
    newTimestamp: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  writeFile(
    path: string,
    data: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "writeFile(string,string)"(
    path: string,
    data: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  writeFileBinary(
    path: string,
    data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "writeFileBinary(string,bytes)"(
    path: string,
    data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  writeJson(
    json: string,
    path: string,
    valueKey: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "writeJson(string,string,string)"(
    json: string,
    path: string,
    valueKey: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "writeJson(string,string)"(
    json: string,
    path: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  writeLine(
    path: string,
    data: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "writeLine(string,string)"(
    path: string,
    data: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    accesses(
      target: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "accesses(address)"(
      target: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    activeFork(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "activeFork()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    addr(
      privateKey: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "addr(uint256)"(
      privateKey: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    allowCheatcodes(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "allowCheatcodes(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    assume(
      condition: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "assume(bool)"(
      condition: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    breakpoint(
      char: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "breakpoint(string)"(
      char: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "breakpoint(string,bool)"(
      char: string,
      value: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    broadcast(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "broadcast()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "broadcast(address)"(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "broadcast(uint256)"(
      privateKey: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    chainId(
      newChainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "chainId(uint256)"(
      newChainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    clearMockedCalls(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "clearMockedCalls()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    closeFile(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "closeFile(string)"(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    coinbase(
      newCoinbase: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "coinbase(address)"(
      newCoinbase: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    createDir(
      path: string,
      recursive: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "createDir(string,bool)"(
      path: string,
      recursive: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    createFork(
      urlOrAlias: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "createFork(string)"(
      urlOrAlias: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "createFork(string,uint256)"(
      urlOrAlias: string,
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "createFork(string,bytes32)"(
      urlOrAlias: string,
      txHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    createSelectFork(
      urlOrAlias: string,
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "createSelectFork(string,uint256)"(
      urlOrAlias: string,
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "createSelectFork(string,bytes32)"(
      urlOrAlias: string,
      txHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "createSelectFork(string)"(
      urlOrAlias: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    deal(
      account: string,
      newBalance: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "deal(address,uint256)"(
      account: string,
      newBalance: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    deriveKey(
      mnemonic: string,
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "deriveKey(string,uint32)"(
      mnemonic: string,
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "deriveKey(string,string,uint32)"(
      mnemonic: string,
      derivationPath: string,
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    difficulty(
      newDifficulty: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "difficulty(uint256)"(
      newDifficulty: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    envAddress(
      name: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envAddress(string)"(
      name: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envAddress(string,string)"(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    envBool(name: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "envBool(string)"(
      name: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envBool(string,string)"(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    envBytes(name: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "envBytes(string)"(
      name: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envBytes(string,string)"(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    envBytes32(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envBytes32(string,string)"(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envBytes32(string)"(
      name: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    envInt(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envInt(string,string)"(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envInt(string)"(
      name: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    envOr(
      name: string,
      delim: string,
      defaultValue: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envOr(string,string,bytes32[])"(
      name: string,
      delim: string,
      defaultValue: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envOr(string,string,int256[])"(
      name: string,
      delim: string,
      defaultValue: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envOr(string,bool)"(
      name: string,
      defaultValue: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envOr(string,address)"(
      name: string,
      defaultValue: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envOr(string,uint256)"(
      name: string,
      defaultValue: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envOr(string,string,bytes[])"(
      name: string,
      delim: string,
      defaultValue: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envOr(string,string,uint256[])"(
      name: string,
      delim: string,
      defaultValue: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envOr(string,string,string[])"(
      name: string,
      delim: string,
      defaultValue: string[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envOr(string,bytes)"(
      name: string,
      defaultValue: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envOr(string,bytes32)"(
      name: string,
      defaultValue: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envOr(string,int256)"(
      name: string,
      defaultValue: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envOr(string,string,address[])"(
      name: string,
      delim: string,
      defaultValue: string[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envOr(string,string)"(
      name: string,
      defaultValue: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envOr(string,string,bool[])"(
      name: string,
      delim: string,
      defaultValue: boolean[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    envString(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envString(string,string)"(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envString(string)"(
      name: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    envUint(name: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "envUint(string)"(
      name: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "envUint(string,string)"(
      name: string,
      delim: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    etch(
      target: string,
      newRuntimeBytecode: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "etch(address,bytes)"(
      target: string,
      newRuntimeBytecode: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    expectCall(
      callee: string,
      msgValue: BigNumberish,
      gas: BigNumberish,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "expectCall(address,uint256,uint64,bytes)"(
      callee: string,
      msgValue: BigNumberish,
      gas: BigNumberish,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "expectCall(address,uint256,uint64,bytes,uint64)"(
      callee: string,
      msgValue: BigNumberish,
      gas: BigNumberish,
      data: Arrayish,
      count: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "expectCall(address,uint256,bytes,uint64)"(
      callee: string,
      msgValue: BigNumberish,
      data: Arrayish,
      count: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "expectCall(address,bytes)"(
      callee: string,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "expectCall(address,bytes,uint64)"(
      callee: string,
      data: Arrayish,
      count: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "expectCall(address,uint256,bytes)"(
      callee: string,
      msgValue: BigNumberish,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    expectCallMinGas(
      callee: string,
      msgValue: BigNumberish,
      minGas: BigNumberish,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "expectCallMinGas(address,uint256,uint64,bytes)"(
      callee: string,
      msgValue: BigNumberish,
      minGas: BigNumberish,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "expectCallMinGas(address,uint256,uint64,bytes,uint64)"(
      callee: string,
      msgValue: BigNumberish,
      minGas: BigNumberish,
      data: Arrayish,
      count: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    expectEmit(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "expectEmit()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "expectEmit(bool,bool,bool,bool)"(
      checkTopic1: boolean,
      checkTopic2: boolean,
      checkTopic3: boolean,
      checkData: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "expectEmit(bool,bool,bool,bool,address)"(
      checkTopic1: boolean,
      checkTopic2: boolean,
      checkTopic3: boolean,
      checkData: boolean,
      emitter: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "expectEmit(address)"(
      emitter: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    expectRevert(
      revertData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "expectRevert(bytes4)"(
      revertData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "expectRevert(bytes)"(
      revertData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "expectRevert()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    expectSafeMemory(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "expectSafeMemory(uint64,uint64)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    expectSafeMemoryCall(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "expectSafeMemoryCall(uint64,uint64)"(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    fee(
      newBasefee: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "fee(uint256)"(
      newBasefee: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    ffi(
      commandInput: string[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "ffi(string[])"(
      commandInput: string[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    fsMetadata(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "fsMetadata(string)"(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getCode(
      artifactPath: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getCode(string)"(
      artifactPath: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getDeployedCode(
      artifactPath: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getDeployedCode(string)"(
      artifactPath: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getNonce(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getNonce(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getRecordedLogs(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getRecordedLogs()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    isPersistent(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "isPersistent(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    label(
      account: string,
      newLabel: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "label(address,string)"(
      account: string,
      newLabel: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    load(
      target: string,
      slot: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "load(address,bytes32)"(
      target: string,
      slot: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    makePersistent(
      accounts: string[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "makePersistent(address[])"(
      accounts: string[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "makePersistent(address,address)"(
      account0: string,
      account1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "makePersistent(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "makePersistent(address,address,address)"(
      account0: string,
      account1: string,
      account2: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    mockCall(
      callee: string,
      msgValue: BigNumberish,
      data: Arrayish,
      returnData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "mockCall(address,uint256,bytes,bytes)"(
      callee: string,
      msgValue: BigNumberish,
      data: Arrayish,
      returnData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "mockCall(address,bytes,bytes)"(
      callee: string,
      data: Arrayish,
      returnData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    mockCallRevert(
      callee: string,
      msgValue: BigNumberish,
      data: Arrayish,
      revertData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "mockCallRevert(address,uint256,bytes,bytes)"(
      callee: string,
      msgValue: BigNumberish,
      data: Arrayish,
      revertData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "mockCallRevert(address,bytes,bytes)"(
      callee: string,
      data: Arrayish,
      revertData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseAddress(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseAddress(string)"(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseBool(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseBool(string)"(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseBytes(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseBytes(string)"(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseBytes32(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseBytes32(string)"(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseInt(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseInt(string)"(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseJson(
      json: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseJson(string)"(
      json: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseJson(string,string)"(
      json: string,
      key: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseJsonAddress(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseJsonAddress(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseJsonAddressArray(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseJsonAddressArray(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseJsonBool(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseJsonBool(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseJsonBoolArray(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseJsonBoolArray(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseJsonBytes(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseJsonBytes(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseJsonBytes32(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseJsonBytes32(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseJsonBytes32Array(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseJsonBytes32Array(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseJsonBytesArray(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseJsonBytesArray(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseJsonInt(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseJsonInt(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseJsonIntArray(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseJsonIntArray(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseJsonString(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseJsonString(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseJsonStringArray(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseJsonStringArray(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseJsonUint(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseJsonUint(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseJsonUintArray(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseJsonUintArray(string,string)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    parseUint(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "parseUint(string)"(
      stringifiedValue: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    pauseGasMetering(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "pauseGasMetering()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    prank(
      msgSender: string,
      txOrigin: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "prank(address,address)"(
      msgSender: string,
      txOrigin: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "prank(address)"(
      msgSender: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    projectRoot(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "projectRoot()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    readDir(
      path: string,
      maxDepth: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "readDir(string,uint64)"(
      path: string,
      maxDepth: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "readDir(string,uint64,bool)"(
      path: string,
      maxDepth: BigNumberish,
      followLinks: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "readDir(string)"(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    readFile(path: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "readFile(string)"(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    readFileBinary(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "readFileBinary(string)"(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    readLine(path: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "readLine(string)"(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    readLink(
      linkPath: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "readLink(string)"(
      linkPath: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    record(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "record()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    recordLogs(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "recordLogs()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    rememberKey(
      privateKey: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "rememberKey(uint256)"(
      privateKey: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    removeDir(
      path: string,
      recursive: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "removeDir(string,bool)"(
      path: string,
      recursive: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    removeFile(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "removeFile(string)"(
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    resumeGasMetering(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "resumeGasMetering()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    revertTo(
      snapshotId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "revertTo(uint256)"(
      snapshotId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    revokePersistent(
      accounts: string[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "revokePersistent(address[])"(
      accounts: string[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "revokePersistent(address)"(
      account: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    roll(
      newHeight: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "roll(uint256)"(
      newHeight: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    rollFork(
      txHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "rollFork(bytes32)"(
      txHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "rollFork(uint256,uint256)"(
      forkId: BigNumberish,
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "rollFork(uint256)"(
      blockNumber: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "rollFork(uint256,bytes32)"(
      forkId: BigNumberish,
      txHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    rpcUrl(
      rpcAlias: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "rpcUrl(string)"(
      rpcAlias: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    rpcUrlStructs(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "rpcUrlStructs()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    rpcUrls(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "rpcUrls()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    selectFork(
      forkId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "selectFork(uint256)"(
      forkId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    serializeAddress(
      objectKey: string,
      valueKey: string,
      values: string[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "serializeAddress(string,string,address[])"(
      objectKey: string,
      valueKey: string,
      values: string[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "serializeAddress(string,string,address)"(
      objectKey: string,
      valueKey: string,
      value: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    serializeBool(
      objectKey: string,
      valueKey: string,
      values: boolean[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "serializeBool(string,string,bool[])"(
      objectKey: string,
      valueKey: string,
      values: boolean[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "serializeBool(string,string,bool)"(
      objectKey: string,
      valueKey: string,
      value: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    serializeBytes(
      objectKey: string,
      valueKey: string,
      values: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "serializeBytes(string,string,bytes[])"(
      objectKey: string,
      valueKey: string,
      values: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "serializeBytes(string,string,bytes)"(
      objectKey: string,
      valueKey: string,
      value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    serializeBytes32(
      objectKey: string,
      valueKey: string,
      values: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "serializeBytes32(string,string,bytes32[])"(
      objectKey: string,
      valueKey: string,
      values: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "serializeBytes32(string,string,bytes32)"(
      objectKey: string,
      valueKey: string,
      value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    serializeInt(
      objectKey: string,
      valueKey: string,
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "serializeInt(string,string,int256)"(
      objectKey: string,
      valueKey: string,
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "serializeInt(string,string,int256[])"(
      objectKey: string,
      valueKey: string,
      values: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    serializeString(
      objectKey: string,
      valueKey: string,
      values: string[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "serializeString(string,string,string[])"(
      objectKey: string,
      valueKey: string,
      values: string[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "serializeString(string,string,string)"(
      objectKey: string,
      valueKey: string,
      value: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    serializeUint(
      objectKey: string,
      valueKey: string,
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "serializeUint(string,string,uint256)"(
      objectKey: string,
      valueKey: string,
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "serializeUint(string,string,uint256[])"(
      objectKey: string,
      valueKey: string,
      values: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setEnv(
      name: string,
      value: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setEnv(string,string)"(
      name: string,
      value: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setNonce(
      account: string,
      newNonce: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setNonce(address,uint64)"(
      account: string,
      newNonce: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    sign(
      privateKey: BigNumberish,
      digest: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "sign(uint256,bytes32)"(
      privateKey: BigNumberish,
      digest: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    snapshot(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "snapshot()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    startBroadcast(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "startBroadcast()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "startBroadcast(address)"(
      signer: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "startBroadcast(uint256)"(
      privateKey: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    startPrank(
      msgSender: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "startPrank(address)"(
      msgSender: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "startPrank(address,address)"(
      msgSender: string,
      txOrigin: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    stopBroadcast(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "stopBroadcast()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    stopPrank(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "stopPrank()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    store(
      target: string,
      slot: Arrayish,
      value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "store(address,bytes32,bytes32)"(
      target: string,
      slot: Arrayish,
      value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    toString(
      value: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "toString(address)"(
      value: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "toString(uint256)"(
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "toString(bytes)"(
      value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "toString(bool)"(
      value: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "toString(int256)"(
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "toString(bytes32)"(
      value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transact(
      forkId: BigNumberish,
      txHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transact(uint256,bytes32)"(
      forkId: BigNumberish,
      txHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transact(bytes32)"(
      txHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    txGasPrice(
      newGasPrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "txGasPrice(uint256)"(
      newGasPrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    warp(
      newTimestamp: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "warp(uint256)"(
      newTimestamp: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    writeFile(
      path: string,
      data: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "writeFile(string,string)"(
      path: string,
      data: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    writeFileBinary(
      path: string,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "writeFileBinary(string,bytes)"(
      path: string,
      data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    writeJson(
      json: string,
      path: string,
      valueKey: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "writeJson(string,string,string)"(
      json: string,
      path: string,
      valueKey: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "writeJson(string,string)"(
      json: string,
      path: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    writeLine(
      path: string,
      data: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "writeLine(string,string)"(
      path: string,
      data: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
