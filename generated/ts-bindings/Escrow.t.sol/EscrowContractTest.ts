/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace StdInvariant {
  export type FuzzSelectorStruct = { addr: string; selectors: BytesLike[] };

  export type FuzzSelectorStructOutput = [string, string[]] & {
    addr: string;
    selectors: string[];
  };
}

export interface EscrowContractTestInterface extends utils.Interface {
  functions: {
    "IS_TEST()": FunctionFragment;
    "createAllocation()": FunctionFragment;
    "defineDebugLabels()": FunctionFragment;
    "deployContracts()": FunctionFragment;
    "depositEscrow(address,address,uint256)": FunctionFragment;
    "depositManyEscrow(address,address[],uint256[],bool)": FunctionFragment;
    "excludeArtifacts()": FunctionFragment;
    "excludeContracts()": FunctionFragment;
    "excludeSenders()": FunctionFragment;
    "failed()": FunctionFragment;
    "generateKeys()": FunctionFragment;
    "integrationTestSetup()": FunctionFragment;
    "setUp()": FunctionFragment;
    "targetArtifactSelectors()": FunctionFragment;
    "targetArtifacts()": FunctionFragment;
    "targetContracts()": FunctionFragment;
    "targetSelectors()": FunctionFragment;
    "targetSenders()": FunctionFragment;
    "testCancelThawSignerSignerNotAuthorizedBySender()": FunctionFragment;
    "testConstructorInputValidation()": FunctionFragment;
    "testDepositFunds()": FunctionFragment;
    "testDepositManyFunds()": FunctionFragment;
    "testDepositManyFundsWithLengthMismatch()": FunctionFragment;
    "testDuplicateAllocationID()": FunctionFragment;
    "testGetEscrowAmount()": FunctionFragment;
    "testGetEscrowFromSignerAddress()": FunctionFragment;
    "testInvalidAuthorizeSignerProof()": FunctionFragment;
    "testInvalidSignerProof()": FunctionFragment;
    "testMultipleThawRequests()": FunctionFragment;
    "testRedeemRAVInvalidProof()": FunctionFragment;
    "testRedeemRAVSignedByAuthorizedSigner()": FunctionFragment;
    "testRedeemRAVWithInvalidSignature()": FunctionFragment;
    "testRedeemRAVWithValueGreaterThanAvailableEscrow()": FunctionFragment;
    "testRevokeAuthorizedSigner()": FunctionFragment;
    "testSignerAlreadyAuthorized()": FunctionFragment;
    "testSignerNotAuthorizedGetEscrowFromSignerAddress()": FunctionFragment;
    "testSignerStillThawing()": FunctionFragment;
    "testThawReduce()": FunctionFragment;
    "testThawRevertInsufficientEscrow()": FunctionFragment;
    "testThawRevertInsufficientThawAmount()": FunctionFragment;
    "testThawSignerSignerNotAuthorizedBySender()": FunctionFragment;
    "testWithdrawFundsAfterFreezePeriod()": FunctionFragment;
    "transferTokens()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_TEST"
      | "createAllocation"
      | "defineDebugLabels"
      | "deployContracts"
      | "depositEscrow"
      | "depositManyEscrow"
      | "excludeArtifacts"
      | "excludeContracts"
      | "excludeSenders"
      | "failed"
      | "generateKeys"
      | "integrationTestSetup"
      | "setUp"
      | "targetArtifactSelectors"
      | "targetArtifacts"
      | "targetContracts"
      | "targetSelectors"
      | "targetSenders"
      | "testCancelThawSignerSignerNotAuthorizedBySender"
      | "testConstructorInputValidation"
      | "testDepositFunds"
      | "testDepositManyFunds"
      | "testDepositManyFundsWithLengthMismatch"
      | "testDuplicateAllocationID"
      | "testGetEscrowAmount"
      | "testGetEscrowFromSignerAddress"
      | "testInvalidAuthorizeSignerProof"
      | "testInvalidSignerProof"
      | "testMultipleThawRequests"
      | "testRedeemRAVInvalidProof"
      | "testRedeemRAVSignedByAuthorizedSigner"
      | "testRedeemRAVWithInvalidSignature"
      | "testRedeemRAVWithValueGreaterThanAvailableEscrow"
      | "testRevokeAuthorizedSigner"
      | "testSignerAlreadyAuthorized"
      | "testSignerNotAuthorizedGetEscrowFromSignerAddress"
      | "testSignerStillThawing"
      | "testThawReduce"
      | "testThawRevertInsufficientEscrow"
      | "testThawRevertInsufficientThawAmount"
      | "testThawSignerSignerNotAuthorizedBySender"
      | "testWithdrawFundsAfterFreezePeriod"
      | "transferTokens"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defineDebugLabels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositEscrow",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositManyEscrow",
    values: [string, string[], BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeSenders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "generateKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "integrationTestSetup",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetArtifactSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCancelThawSignerSignerNotAuthorizedBySender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testConstructorInputValidation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositManyFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositManyFundsWithLengthMismatch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testDuplicateAllocationID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testGetEscrowAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testGetEscrowFromSignerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testInvalidAuthorizeSignerProof",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testInvalidSignerProof",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testMultipleThawRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRedeemRAVInvalidProof",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRedeemRAVSignedByAuthorizedSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRedeemRAVWithInvalidSignature",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRedeemRAVWithValueGreaterThanAvailableEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRevokeAuthorizedSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSignerAlreadyAuthorized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSignerNotAuthorizedGetEscrowFromSignerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSignerStillThawing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testThawReduce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testThawRevertInsufficientEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testThawRevertInsufficientThawAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testThawSignerSignerNotAuthorizedBySender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testWithdrawFundsAfterFreezePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defineDebugLabels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositManyEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrationTestSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifactSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCancelThawSignerSignerNotAuthorizedBySender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testConstructorInputValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositManyFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositManyFundsWithLengthMismatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDuplicateAllocationID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetEscrowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetEscrowFromSignerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testInvalidAuthorizeSignerProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testInvalidSignerProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testMultipleThawRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRedeemRAVInvalidProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRedeemRAVSignedByAuthorizedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRedeemRAVWithInvalidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRedeemRAVWithValueGreaterThanAvailableEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevokeAuthorizedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSignerAlreadyAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSignerNotAuthorizedGetEscrowFromSignerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSignerStillThawing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testThawReduce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testThawRevertInsufficientEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testThawRevertInsufficientThawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testThawSignerSignerNotAuthorizedBySender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testWithdrawFundsAfterFreezePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokens",
    data: BytesLike
  ): Result;

  events: {
    "AuthorizeSigner(address,address)": EventFragment;
    "CancelThaw(address,address)": EventFragment;
    "CancelThawSigner(address,address,uint256)": EventFragment;
    "Deposit(address,address,uint256)": EventFragment;
    "DepositAssigned(address,address,uint256)": EventFragment;
    "Redeem(address,address,address,uint256,uint256)": EventFragment;
    "RevokeAuthorizedSigner(address,address)": EventFragment;
    "Thaw(address,address,uint256,uint256,uint256)": EventFragment;
    "ThawSigner(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UnassignedDeposit(address,address,uint256)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorizeSigner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelThaw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelThawSigner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositAssigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeAuthorizedSigner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Thaw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThawSigner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnassignedDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,int256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,address[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface AuthorizeSignerEventObject {
  signer: string;
  sender: string;
}
export type AuthorizeSignerEvent = TypedEvent<
  [string, string],
  AuthorizeSignerEventObject
>;

export type AuthorizeSignerEventFilter = TypedEventFilter<AuthorizeSignerEvent>;

export interface CancelThawEventObject {
  sender: string;
  receiver: string;
}
export type CancelThawEvent = TypedEvent<
  [string, string],
  CancelThawEventObject
>;

export type CancelThawEventFilter = TypedEventFilter<CancelThawEvent>;

export interface CancelThawSignerEventObject {
  sender: string;
  authorizedSigner: string;
  thawEndTimestamp: BigNumber;
}
export type CancelThawSignerEvent = TypedEvent<
  [string, string, BigNumber],
  CancelThawSignerEventObject
>;

export type CancelThawSignerEventFilter =
  TypedEventFilter<CancelThawSignerEvent>;

export interface DepositEventObject {
  sender: string;
  receiver: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositAssignedEventObject {
  sender: string;
  receiver: string;
  amount: BigNumber;
}
export type DepositAssignedEvent = TypedEvent<
  [string, string, BigNumber],
  DepositAssignedEventObject
>;

export type DepositAssignedEventFilter = TypedEventFilter<DepositAssignedEvent>;

export interface RedeemEventObject {
  sender: string;
  receiver: string;
  allocationID: string;
  expectedAmount: BigNumber;
  actualAmount: BigNumber;
}
export type RedeemEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  RedeemEventObject
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface RevokeAuthorizedSignerEventObject {
  sender: string;
  authorizedSigner: string;
}
export type RevokeAuthorizedSignerEvent = TypedEvent<
  [string, string],
  RevokeAuthorizedSignerEventObject
>;

export type RevokeAuthorizedSignerEventFilter =
  TypedEventFilter<RevokeAuthorizedSignerEvent>;

export interface ThawEventObject {
  sender: string;
  receiver: string;
  amount: BigNumber;
  totalAmountThawing: BigNumber;
  thawEndTimestamp: BigNumber;
}
export type ThawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  ThawEventObject
>;

export type ThawEventFilter = TypedEventFilter<ThawEvent>;

export interface ThawSignerEventObject {
  sender: string;
  authorizedSigner: string;
  thawEndTimestamp: BigNumber;
}
export type ThawSignerEvent = TypedEvent<
  [string, string, BigNumber],
  ThawSignerEventObject
>;

export type ThawSignerEventFilter = TypedEventFilter<ThawSignerEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnassignedDepositEventObject {
  depositor: string;
  sender: string;
  amount: BigNumber;
}
export type UnassignedDepositEvent = TypedEvent<
  [string, string, BigNumber],
  UnassignedDepositEventObject
>;

export type UnassignedDepositEventFilter =
  TypedEventFilter<UnassignedDepositEvent>;

export interface WithdrawEventObject {
  sender: string;
  receiver: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_uint256_array_EventObject
>;

export type log_array_uint256_array_EventFilter =
  TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_int256_array_EventObject
>;

export type log_array_int256_array_EventFilter =
  TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<
  [string[]],
  log_array_address_array_EventObject
>;

export type log_array_address_array_EventFilter =
  TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<
  [string, string],
  log_named_addressEventObject
>;

export type log_named_addressEventFilter =
  TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<
  [string, string],
  log_named_bytesEventObject
>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<
  [string, string],
  log_named_bytes32EventObject
>;

export type log_named_bytes32EventFilter =
  TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_intEventObject
>;

export type log_named_decimal_intEventFilter =
  TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_uintEventObject
>;

export type log_named_decimal_uintEventFilter =
  TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<
  [string, BigNumber],
  log_named_intEventObject
>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<
  [string, string],
  log_named_stringEventObject
>;

export type log_named_stringEventFilter =
  TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<
  [string, BigNumber],
  log_named_uintEventObject
>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface EscrowContractTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowContractTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    createAllocation(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    defineDebugLabels(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deployContracts(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositEscrow(
      sender: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositManyEscrow(
      sender: string,
      receivers: string[],
      amounts: BigNumberish[],
      expectSucceed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    excludeArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedArtifacts_: string[] }>;

    excludeContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedContracts_: string[] }>;

    excludeSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedSenders_: string[] }>;

    failed(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    generateKeys(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    integrationTestSetup(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUp(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedArtifactSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedArtifacts_: string[] }>;

    targetContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedContracts_: string[] }>;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedSenders_: string[] }>;

    testCancelThawSignerSignerNotAuthorizedBySender(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testConstructorInputValidation(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testDepositFunds(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testDepositManyFunds(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testDepositManyFundsWithLengthMismatch(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testDuplicateAllocationID(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testGetEscrowAmount(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testGetEscrowFromSignerAddress(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testInvalidAuthorizeSignerProof(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testInvalidSignerProof(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testMultipleThawRequests(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testRedeemRAVInvalidProof(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testRedeemRAVSignedByAuthorizedSigner(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testRedeemRAVWithInvalidSignature(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testRedeemRAVWithValueGreaterThanAvailableEscrow(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testRevokeAuthorizedSigner(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testSignerAlreadyAuthorized(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testSignerNotAuthorizedGetEscrowFromSignerAddress(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testSignerStillThawing(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testThawReduce(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testThawRevertInsufficientEscrow(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testThawRevertInsufficientThawAmount(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testThawSignerSignerNotAuthorizedBySender(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testWithdrawFundsAfterFreezePeriod(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferTokens(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  createAllocation(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  defineDebugLabels(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deployContracts(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositEscrow(
    sender: string,
    receiver: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositManyEscrow(
    sender: string,
    receivers: string[],
    amounts: BigNumberish[],
    expectSucceed: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

  excludeContracts(overrides?: CallOverrides): Promise<string[]>;

  excludeSenders(overrides?: CallOverrides): Promise<string[]>;

  failed(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  generateKeys(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  integrationTestSetup(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUp(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  targetArtifactSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

  targetContracts(overrides?: CallOverrides): Promise<string[]>;

  targetSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetSenders(overrides?: CallOverrides): Promise<string[]>;

  testCancelThawSignerSignerNotAuthorizedBySender(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testConstructorInputValidation(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testDepositFunds(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testDepositManyFunds(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testDepositManyFundsWithLengthMismatch(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testDuplicateAllocationID(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testGetEscrowAmount(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testGetEscrowFromSignerAddress(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testInvalidAuthorizeSignerProof(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testInvalidSignerProof(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testMultipleThawRequests(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testRedeemRAVInvalidProof(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testRedeemRAVSignedByAuthorizedSigner(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testRedeemRAVWithInvalidSignature(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testRedeemRAVWithValueGreaterThanAvailableEscrow(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testRevokeAuthorizedSigner(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testSignerAlreadyAuthorized(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testSignerNotAuthorizedGetEscrowFromSignerAddress(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testSignerStillThawing(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testThawReduce(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testThawRevertInsufficientEscrow(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testThawRevertInsufficientThawAmount(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testThawSignerSignerNotAuthorizedBySender(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testWithdrawFundsAfterFreezePeriod(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferTokens(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    createAllocation(overrides?: CallOverrides): Promise<void>;

    defineDebugLabels(overrides?: CallOverrides): Promise<void>;

    deployContracts(overrides?: CallOverrides): Promise<void>;

    depositEscrow(
      sender: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositManyEscrow(
      sender: string,
      receivers: string[],
      amounts: BigNumberish[],
      expectSucceed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

    excludeContracts(overrides?: CallOverrides): Promise<string[]>;

    excludeSenders(overrides?: CallOverrides): Promise<string[]>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    generateKeys(overrides?: CallOverrides): Promise<void>;

    integrationTestSetup(overrides?: CallOverrides): Promise<void>;

    setUp(overrides?: CallOverrides): Promise<void>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

    targetContracts(overrides?: CallOverrides): Promise<string[]>;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetSenders(overrides?: CallOverrides): Promise<string[]>;

    testCancelThawSignerSignerNotAuthorizedBySender(
      overrides?: CallOverrides
    ): Promise<void>;

    testConstructorInputValidation(overrides?: CallOverrides): Promise<void>;

    testDepositFunds(overrides?: CallOverrides): Promise<void>;

    testDepositManyFunds(overrides?: CallOverrides): Promise<void>;

    testDepositManyFundsWithLengthMismatch(
      overrides?: CallOverrides
    ): Promise<void>;

    testDuplicateAllocationID(overrides?: CallOverrides): Promise<void>;

    testGetEscrowAmount(overrides?: CallOverrides): Promise<void>;

    testGetEscrowFromSignerAddress(overrides?: CallOverrides): Promise<void>;

    testInvalidAuthorizeSignerProof(overrides?: CallOverrides): Promise<void>;

    testInvalidSignerProof(overrides?: CallOverrides): Promise<void>;

    testMultipleThawRequests(overrides?: CallOverrides): Promise<void>;

    testRedeemRAVInvalidProof(overrides?: CallOverrides): Promise<void>;

    testRedeemRAVSignedByAuthorizedSigner(
      overrides?: CallOverrides
    ): Promise<void>;

    testRedeemRAVWithInvalidSignature(overrides?: CallOverrides): Promise<void>;

    testRedeemRAVWithValueGreaterThanAvailableEscrow(
      overrides?: CallOverrides
    ): Promise<void>;

    testRevokeAuthorizedSigner(overrides?: CallOverrides): Promise<void>;

    testSignerAlreadyAuthorized(overrides?: CallOverrides): Promise<void>;

    testSignerNotAuthorizedGetEscrowFromSignerAddress(
      overrides?: CallOverrides
    ): Promise<void>;

    testSignerStillThawing(overrides?: CallOverrides): Promise<void>;

    testThawReduce(overrides?: CallOverrides): Promise<void>;

    testThawRevertInsufficientEscrow(overrides?: CallOverrides): Promise<void>;

    testThawRevertInsufficientThawAmount(
      overrides?: CallOverrides
    ): Promise<void>;

    testThawSignerSignerNotAuthorizedBySender(
      overrides?: CallOverrides
    ): Promise<void>;

    testWithdrawFundsAfterFreezePeriod(
      overrides?: CallOverrides
    ): Promise<void>;

    transferTokens(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AuthorizeSigner(address,address)"(
      signer?: string | null,
      sender?: string | null
    ): AuthorizeSignerEventFilter;
    AuthorizeSigner(
      signer?: string | null,
      sender?: string | null
    ): AuthorizeSignerEventFilter;

    "CancelThaw(address,address)"(
      sender?: string | null,
      receiver?: string | null
    ): CancelThawEventFilter;
    CancelThaw(
      sender?: string | null,
      receiver?: string | null
    ): CancelThawEventFilter;

    "CancelThawSigner(address,address,uint256)"(
      sender?: string | null,
      authorizedSigner?: string | null,
      thawEndTimestamp?: null
    ): CancelThawSignerEventFilter;
    CancelThawSigner(
      sender?: string | null,
      authorizedSigner?: string | null,
      thawEndTimestamp?: null
    ): CancelThawSignerEventFilter;

    "Deposit(address,address,uint256)"(
      sender?: string | null,
      receiver?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      sender?: string | null,
      receiver?: string | null,
      amount?: null
    ): DepositEventFilter;

    "DepositAssigned(address,address,uint256)"(
      sender?: string | null,
      receiver?: string | null,
      amount?: null
    ): DepositAssignedEventFilter;
    DepositAssigned(
      sender?: string | null,
      receiver?: string | null,
      amount?: null
    ): DepositAssignedEventFilter;

    "Redeem(address,address,address,uint256,uint256)"(
      sender?: string | null,
      receiver?: string | null,
      allocationID?: string | null,
      expectedAmount?: null,
      actualAmount?: null
    ): RedeemEventFilter;
    Redeem(
      sender?: string | null,
      receiver?: string | null,
      allocationID?: string | null,
      expectedAmount?: null,
      actualAmount?: null
    ): RedeemEventFilter;

    "RevokeAuthorizedSigner(address,address)"(
      sender?: string | null,
      authorizedSigner?: string | null
    ): RevokeAuthorizedSignerEventFilter;
    RevokeAuthorizedSigner(
      sender?: string | null,
      authorizedSigner?: string | null
    ): RevokeAuthorizedSignerEventFilter;

    "Thaw(address,address,uint256,uint256,uint256)"(
      sender?: string | null,
      receiver?: string | null,
      amount?: null,
      totalAmountThawing?: null,
      thawEndTimestamp?: null
    ): ThawEventFilter;
    Thaw(
      sender?: string | null,
      receiver?: string | null,
      amount?: null,
      totalAmountThawing?: null,
      thawEndTimestamp?: null
    ): ThawEventFilter;

    "ThawSigner(address,address,uint256)"(
      sender?: string | null,
      authorizedSigner?: string | null,
      thawEndTimestamp?: null
    ): ThawSignerEventFilter;
    ThawSigner(
      sender?: string | null,
      authorizedSigner?: string | null,
      thawEndTimestamp?: null
    ): ThawSignerEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "UnassignedDeposit(address,address,uint256)"(
      depositor?: string | null,
      sender?: string | null,
      amount?: null
    ): UnassignedDepositEventFilter;
    UnassignedDeposit(
      depositor?: string | null,
      sender?: string | null,
      amount?: null
    ): UnassignedDepositEventFilter;

    "Withdraw(address,address,uint256)"(
      sender?: string | null,
      receiver?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      sender?: string | null,
      receiver?: string | null,
      amount?: null
    ): WithdrawEventFilter;

    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(
      key?: null,
      val?: null
    ): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(
      key?: null,
      val?: null
    ): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(
      key?: null,
      val?: null
    ): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(
      key?: null,
      val?: null
    ): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(
      key?: null,
      val?: null
    ): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(
      key?: null,
      val?: null
    ): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(
      key?: null,
      val?: null
    ): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    createAllocation(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    defineDebugLabels(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deployContracts(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositEscrow(
      sender: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositManyEscrow(
      sender: string,
      receivers: string[],
      amounts: BigNumberish[],
      expectSucceed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    excludeArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeContracts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeSenders(overrides?: CallOverrides): Promise<BigNumber>;

    failed(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    generateKeys(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    integrationTestSetup(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUp(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    targetArtifactSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    targetContracts(overrides?: CallOverrides): Promise<BigNumber>;

    targetSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetSenders(overrides?: CallOverrides): Promise<BigNumber>;

    testCancelThawSignerSignerNotAuthorizedBySender(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testConstructorInputValidation(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testDepositFunds(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testDepositManyFunds(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testDepositManyFundsWithLengthMismatch(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testDuplicateAllocationID(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testGetEscrowAmount(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testGetEscrowFromSignerAddress(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testInvalidAuthorizeSignerProof(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testInvalidSignerProof(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testMultipleThawRequests(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testRedeemRAVInvalidProof(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testRedeemRAVSignedByAuthorizedSigner(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testRedeemRAVWithInvalidSignature(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testRedeemRAVWithValueGreaterThanAvailableEscrow(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testRevokeAuthorizedSigner(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testSignerAlreadyAuthorized(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testSignerNotAuthorizedGetEscrowFromSignerAddress(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testSignerStillThawing(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testThawReduce(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testThawRevertInsufficientEscrow(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testThawRevertInsufficientThawAmount(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testThawSignerSignerNotAuthorizedBySender(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testWithdrawFundsAfterFreezePeriod(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferTokens(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createAllocation(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    defineDebugLabels(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deployContracts(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositEscrow(
      sender: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositManyEscrow(
      sender: string,
      receivers: string[],
      amounts: BigNumberish[],
      expectSucceed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    excludeArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    generateKeys(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    integrationTestSetup(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    targetArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSelectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testCancelThawSignerSignerNotAuthorizedBySender(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testConstructorInputValidation(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testDepositFunds(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testDepositManyFunds(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testDepositManyFundsWithLengthMismatch(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testDuplicateAllocationID(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testGetEscrowAmount(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testGetEscrowFromSignerAddress(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testInvalidAuthorizeSignerProof(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testInvalidSignerProof(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testMultipleThawRequests(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testRedeemRAVInvalidProof(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testRedeemRAVSignedByAuthorizedSigner(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testRedeemRAVWithInvalidSignature(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testRedeemRAVWithValueGreaterThanAvailableEscrow(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testRevokeAuthorizedSigner(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testSignerAlreadyAuthorized(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testSignerNotAuthorizedGetEscrowFromSignerAddress(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testSignerStillThawing(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testThawReduce(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testThawRevertInsufficientEscrow(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testThawRevertInsufficientThawAmount(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testThawSignerSignerNotAuthorizedBySender(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testWithdrawFundsAfterFreezePeriod(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferTokens(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
