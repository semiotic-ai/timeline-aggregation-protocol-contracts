/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface StdStorageSafeInterface extends Interface {
  functions: {};

  events: {
    SlotFound: TypedEventDescription<{
      encodeTopics([who, fsig, keysHash, slot]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    WARNING_UninitedSlot: TypedEventDescription<{
      encodeTopics([who, slot]: [null, null]): string[];
    }>;
  };
}

export class StdStorageSafe extends Contract {
  connect(signerOrProvider: Signer | Provider | string): StdStorageSafe;
  attach(addressOrName: string): StdStorageSafe;
  deployed(): Promise<StdStorageSafe>;

  on(event: EventFilter | string, listener: Listener): StdStorageSafe;
  once(event: EventFilter | string, listener: Listener): StdStorageSafe;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): StdStorageSafe;
  removeAllListeners(eventName: EventFilter | string): StdStorageSafe;
  removeListener(eventName: any, listener: Listener): StdStorageSafe;

  interface: StdStorageSafeInterface;

  functions: {};

  filters: {
    SlotFound(who: null, fsig: null, keysHash: null, slot: null): EventFilter;

    WARNING_UninitedSlot(who: null, slot: null): EventFilter;
  };

  estimate: {};
}
