/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace TAPVerifier {
  export type ReceiptAggregateVoucherStruct = {
    allocationId: string;
    timestampNs: BigNumberish;
    valueAggregate: BigNumberish;
  };

  export type ReceiptAggregateVoucherStructOutput = [
    string,
    BigNumber,
    BigNumber
  ] & {
    allocationId: string;
    timestampNs: BigNumber;
    valueAggregate: BigNumber;
  };

  export type SignedRAVStruct = {
    rav: TAPVerifier.ReceiptAggregateVoucherStruct;
    signature: BytesLike;
  };

  export type SignedRAVStructOutput = [
    TAPVerifier.ReceiptAggregateVoucherStructOutput,
    string
  ] & {
    rav: TAPVerifier.ReceiptAggregateVoucherStructOutput;
    signature: string;
  };
}

export interface TAPVerifierInterface extends utils.Interface {
  functions: {
    "eip712Domain()": FunctionFragment;
    "hashRAV((address,uint64,uint128))": FunctionFragment;
    "recoverRAVSigner(((address,uint64,uint128),bytes))": FunctionFragment;
    "verifyRAVSignature(((address,uint64,uint128),bytes),address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "eip712Domain"
      | "hashRAV"
      | "recoverRAVSigner"
      | "verifyRAVSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashRAV",
    values: [TAPVerifier.ReceiptAggregateVoucherStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverRAVSigner",
    values: [TAPVerifier.SignedRAVStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyRAVSignature",
    values: [TAPVerifier.SignedRAVStruct, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashRAV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverRAVSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyRAVSignature",
    data: BytesLike
  ): Result;

  events: {
    "EIP712DomainChanged()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;
}

export interface EIP712DomainChangedEventObject {}
export type EIP712DomainChangedEvent = TypedEvent<
  [],
  EIP712DomainChangedEventObject
>;

export type EIP712DomainChangedEventFilter =
  TypedEventFilter<EIP712DomainChangedEvent>;

export interface TAPVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TAPVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    hashRAV(
      rav: TAPVerifier.ReceiptAggregateVoucherStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    recoverRAVSigner(
      signedRAV: TAPVerifier.SignedRAVStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    verifyRAVSignature(
      signedRAV: TAPVerifier.SignedRAVStruct,
      expectedAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  eip712Domain(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, string, BigNumber[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
      salt: string;
      extensions: BigNumber[];
    }
  >;

  hashRAV(
    rav: TAPVerifier.ReceiptAggregateVoucherStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  recoverRAVSigner(
    signedRAV: TAPVerifier.SignedRAVStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  verifyRAVSignature(
    signedRAV: TAPVerifier.SignedRAVStruct,
    expectedAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    hashRAV(
      rav: TAPVerifier.ReceiptAggregateVoucherStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    recoverRAVSigner(
      signedRAV: TAPVerifier.SignedRAVStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    verifyRAVSignature(
      signedRAV: TAPVerifier.SignedRAVStruct,
      expectedAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "EIP712DomainChanged()"(): EIP712DomainChangedEventFilter;
    EIP712DomainChanged(): EIP712DomainChangedEventFilter;
  };

  estimateGas: {
    eip712Domain(overrides?: CallOverrides): Promise<BigNumber>;

    hashRAV(
      rav: TAPVerifier.ReceiptAggregateVoucherStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverRAVSigner(
      signedRAV: TAPVerifier.SignedRAVStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyRAVSignature(
      signedRAV: TAPVerifier.SignedRAVStruct,
      expectedAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    eip712Domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashRAV(
      rav: TAPVerifier.ReceiptAggregateVoucherStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverRAVSigner(
      signedRAV: TAPVerifier.SignedRAVStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyRAVSignature(
      signedRAV: TAPVerifier.SignedRAVStruct,
      expectedAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
