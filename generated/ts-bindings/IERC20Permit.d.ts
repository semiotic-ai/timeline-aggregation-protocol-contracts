/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface IERC20PermitInterface extends Interface {
  functions: {
    DOMAIN_SEPARATOR: TypedFunctionDescription<{ encode([]: []): string }>;

    nonces: TypedFunctionDescription<{ encode([owner]: [string]): string }>;

    permit: TypedFunctionDescription<{
      encode([owner, spender, value, deadline, v, r, s]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;
  };

  events: {};
}

export class IERC20Permit extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IERC20Permit;
  attach(addressOrName: string): IERC20Permit;
  deployed(): Promise<IERC20Permit>;

  on(event: EventFilter | string, listener: Listener): IERC20Permit;
  once(event: EventFilter | string, listener: Listener): IERC20Permit;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IERC20Permit;
  removeAllListeners(eventName: EventFilter | string): IERC20Permit;
  removeListener(eventName: any, listener: Listener): IERC20Permit;

  interface: IERC20PermitInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: UnsignedTransaction): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: UnsignedTransaction): Promise<string>;

    nonces(owner: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "nonces(address)"(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: UnsignedTransaction): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: UnsignedTransaction): Promise<string>;

  nonces(owner: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

  "nonces(address)"(
    owner: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: Arrayish,
    s: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: Arrayish,
    s: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    DOMAIN_SEPARATOR(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    nonces(owner: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "nonces(address)"(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
